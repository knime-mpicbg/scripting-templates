########################################################################################
# name: Cumulative Density Function (cdf)
# author: Marc Bickle, Antje Janosch
# category: basic/cdf
# preview: 

This plot is useful for plotting the cumulative density function of up to 9 populations and verify whether and how they differ

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

# Parameter selection
<group>

# a) Define column with categorical values
Group = <combobox label="Group" items="$$$STR_ATTRIBUTES$$$" />;


# b) Define which parameter you would like to visualize
params =  c(<panellistbox label="Parameters" items="$$$NUM_ATTRIBUTES$$$" span="3"/>)

</group>

<![CDATA[

# R code


library(ggplot2)
library(reshape)

paramIdx <- which(names(kIn) %in% params)
groupIdx <- which(names(kIn) == Group)

data <- melt(kIn, id.vars = groupIdx, measure.vars = paramIdx)

p <- ggplot(data, aes(x = value, colour = get(Group))) + stat_ecdf() + facet_wrap( ~ variable, scales = "free") + scale_colour_brewer(palette="Set1")
p <- p + theme_bw(base_size = 16) + labs(y = "Probability", color = Group)
print(p)



]]>
</rgg>

########################################################################################
# name: Barplot
# author: Antje Niederlein
# category: basic/barplots
# preview: simplebarplot.png

Flexible template to create a barplot or barplot grid with optional errorbars

Parameter:
Bar height - One or multiple numerical variables. Each value will result in one bar
Error bar checkbox - Draw errorbars?
Error bar - Error bar values corresponding to the height values (same number of columns have to be selected)
To use a flow variable check box and type in variable names using the format: FLOWVAR(variable name)
x-axis - Label to put at the x-axis for each bar (mulitple columns can be selected to combine information)
2D-grid grouping parameter - Allows to split the dataset into multiple plots by this condition (mulitple columns can be selected to combine information)
bar colour - Colour bars by condition (mulitple columns can be selected to combine information)
Enter an additional title
######

<rgg>

    <!--1. Title and short description -->

    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
    <gaprow height="1"/>

    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    # 1. Parameter selection
	<group>

	# Define your numerical parameters represented by bar height
	barHeight = c(<panellistbox label="select columns with values for bar height" items="$$$NUM_ATTRIBUTES$$$"
	                                             span="full"/>)
	plot.Errorbars = <checkbox label="draw errorbars (select column with errorbar values)" selected="t"/>
	# Define your numerical parameters for error bars
	barError = c(<panellistbox label="cErrorBars" items="$$$NUM_ATTRIBUTES$$$"
	                                             span="full"/>)
	<gaprow height="2"/>

	<hbox>
	<checkbox label="use flow variable" var="useFlowVar" selected="false" />
	<textfield label="bar height flow variable:" var="flowVariableBarHeight" data-type="text" default-value= "" size="10" />
	<textfield label="bar error flow variable:" var="flowVariableBarError" data-type="text" default-value= "" size="10" />
	</hbox>

	<hbox>
	xFactor = c(<listbox label="x-axis" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	facetBy = c(<listbox label="2D grid grouping parameters" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	colourBy = c(<listbox label="coloured by" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	</hbox>
	
	<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "" size="10" span="full"/>
	xAngle = as.numeric(c(<combobox label = "angle of x-axis labels"
	  items = "0,90"/>))
	free.scales = <checkbox label="use free y-scales" selected="t"/>
	
	</group>

	<!-- 2. r code-->

	<![CDATA[
	# load libraries
	library(ggplot2)
	library(reshape)
	library(grid)

	# check input parameters
	# -------------------------------------------------------------
	# check flow variables
	if (useFlowVar && !is.na(flowVariableBarHeight)) {
    	barHeight <- flowVariableBarHeight
	}
	if(plot.Errorbars && useFlowVar && !is.na(flowVariableBarError)) {
		barError <- flowVariableBarError
	}
	# no bar height columns selected
	if(is.null(barHeight)) stop("Error: Template initialization fails - no columns for bar height selected")
	# errorbars checked but no column selected
	if(plot.Errorbars & is.null(barError)) plot.Errorbars <- FALSE	# simply don't plot any errorbars
	if(plot.Errorbars & length(barHeight) != length(barError)) stop("Error: Template initialization fails - number of bar height columns not equal to number of error bar columns")
	# no xFactor selected
	if("-NO SELECTION-" %in% xFactor) xFactor <- NULL
	if("-NO SELECTION-" %in% facetBy) facetBy <- NULL
	if("-NO SELECTION-" %in% colourBy) colourBy <- NULL

	xFactorFlag <- facetFlag <- colourFlag <- FALSE
	if(is.null(xFactor)) xFactor <- "-ROW ID-"
	if(!is.null(xFactor) && "-USE COLUMN SELECTION-" %in% xFactor) { xFactorCol <- NULL; xFactorFlag <- TRUE } else xFactorCol <- xFactor
	if(!is.null(facetBy) && "-USE COLUMN SELECTION-" %in% facetBy) { facetCol <- NULL; facetFlag <- TRUE } else facetCol <- facetBy
	if(!is.null(colourBy) && "-USE COLUMN SELECTION-" %in% colourBy) { colourCol <- NULL; colourFlag <- TRUE } else colourCol <- colourBy

	if(free.scales) free.scales <- "free_y" else free.scales <- "fixed"
	
	if (is.na(plotTitle))	plotTitle <- NULL		#default if no title is given

	# -------------------------------------------------------------

	# create rowID column if needed
	if("-ROW ID-" %in% xFactorCol) kIn[,"-ROW ID-"] <- rownames(kIn)

	# combine columns if necessary
	if(length(xFactor) > 1) {
		xFactorCol <- paste(xFactor, collapse = " + ")
		kIn[,xFactorCol] <- apply(kIn[,xFactor], 1, paste, collapse = " + ")
	}
	if(length(facetBy) > 1) {
		facetCol <- paste(facetBy, collapse = " + ")
		kIn[,facetCol] <- apply(kIn[,facetBy], 1, paste, collapse = " + ")
	}
	if(length(colourBy) > 1) {
		colourCol <- paste(colourBy, collapse = " + ")
		kIn[,colourCol] <- apply(kIn[,colourBy], 1, paste, collapse = " + ")
	}

	# extract necessary data and reshape it
	meanData <- kIn[,c(barHeight,xFactorCol, facetCol, colourCol)]

	meanDataLong <- melt(meanData, measure.vars = barHeight, variable_name = "- PARAMETERS -")
	names(meanDataLong)[which(names(meanDataLong) == "value")] <- "height"

	# add errorbar data
	if(plot.Errorbars) {
		sdData <- kIn[,c(barError,xFactorCol, facetCol, colourCol)]
		sdDataLong <- melt(sdData, measure.vars = barError)
		meanDataLong$error <- sdDataLong$value
		meanDataLong$low <- with(meanDataLong, height - error)
		meanDataLong$high <- with(meanDataLong, height + error)
	}

	if(xFactorFlag) xFactorCol <- "- PARAMETERS -"
	if(facetFlag) facetCol <- "- PARAMETERS -"
	if(colourFlag) colourCol <- "- PARAMETERS -"

	#convert to discrete format
	if(!is.null(facetBy)) { 
		facetTitle <- facetCol
		meanDataLong$template.facet.column <- factor(meanDataLong[,facetCol])
		facetCol <- "template.facet.column" 
	}
	if(!is.null(colourBy)) meanDataLong[,colourCol] <- factor(meanDataLong[,colourCol])
	meanDataLong[,xFactorCol] <- factor(meanDataLong[,xFactorCol])

	meanDataLong[,"ggplot_groupid"] <- 1 : nrow(meanDataLong)

	# plot data
	# -------------------------------------------------------------
	p <- ggplot(meanDataLong, aes(x = get(xFactorCol), y = height, group = ggplot_groupid))

	my.dodge <- position_dodge(width=0.9)
	if(!is.null(colourBy)) {
		p <- p + geom_bar(aes(fill = get(colourCol)), stat = "identity", position = my.dodge, colour = "black")
	} else {
		p <- p + geom_bar(stat = "identity", position = my.dodge, colour = "black", fill = "grey")
	}
	if(plot.Errorbars) p <- p + geom_errorbar(aes(ymin = low, ymax = high), position = my.dodge, width = 0.35)

	p <- p + scale_x_discrete(name = xFactorCol)

	if(!is.null(colourCol)) p <- p + scale_fill_discrete(name = colourCol)
	if(!is.null(facetBy)) {
		p <- p + facet_wrap(~ template.facet.column, scales=free.scales)
		
		fTitle <- paste("Grid factor: ",facetTitle,sep = "")
		if(!is.null(plotTitle)) plotTitle <- paste(plotTitle,fTitle,sep = " / ") else plotTitle <- fTitle
		p <- p + ggtitle(plotTitle)
	} else {
		if(!is.null(plotTitle)) p <- p + ggtitle(plotTitle)
	}

	p <- p + theme_grey(base_size=14) + theme(axis.text.x = element_text(angle = 90, hjust = 1))

	print(p)
	# -------------------------------------------------------------

    ]]>

</rgg>
########################################################################################
# name: Barplot with plot options
# author: Antje Niederlein, modified Martin Stoeter
# category: basic/barplots
# preview: simplebarplot.png

Flexible template to create a barplot or barplot grid with optional errorbars
HINT: use GroupBy node to aggregated the data to e.g mean and sd columns 

Parameter:
Bar height - One or multiple numerical variables. Each value will result in one bar
Error bar checkbox - Draw errorbars? Choose to plot just positive or negative error bars
Error bar - Error bar values corresponding to the height values (same number of columns have to be selected)
To use a flow variable check box and type in variable names using the format: FLOWVAR(variable name)
x-axis - Label to put at the x-axis for each bar (mulitple columns can be selected to combine information)
2D-grid grouping parameter - Allows to split the dataset into multiple plots by this condition (mulitple columns can be selected to combine information)
bar colour - Colour bars by condition (mulitple columns can be selected to combine information)
Layout Options: 
 - select background/theme and set general font size in plot (default = 14)
 - select different color models for the plot (see: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#rcolorbrewer-palette-chart )
 - optional the rows and columns can be defined for the 2D grid
 - give plot title and title factor (default = 1.2)
 - x-axis test: angle, text size factor for x-/y-axis (default = 0.8) 
 - y-axis title (or use parameter name: for 2D grid => 'height'), axis title factor (default = 1.0)
 - adjust y-axis scale (check fixed and enter min + max; free for 2D grid), option for log10 scale and log10 numbers on y-axis
 - give legend title, adjust position (fixed position outside diagram or free(range:0-1): [0.1,0.9] = top-left) and legend title/text size factor(default = 0.8)   
######

<rgg>

    <!--1. Title and short description -->
<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>

    <gaprow height="1"/>

    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    #1.0 Parameter selection
	<group>

	# Define your numerical parameters represented by bar height
	barHeight = c(<panellistbox label="select columns with values for bar height" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

	# Define your numerical parameters for error bars
	<hbox>  
	plot.Errorbars = <checkbox label="draw errorbars (select column with errorbar values)" selected="t"/>
	plot.Errorbars.Plus = <checkbox label="draw positive error" selected="t"/>
	plot.Errorbars.Negative = <checkbox label="draw negative error" selected="t"/>
	</hbox> 
	barError = c(<panellistbox label="cErrorBars" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)
	<gaprow height="2"/>

	<hbox>  #define use of flow variables
	<checkbox label="use flow variable" var="useFlowVar" selected="false" />
	<textfield label="bar height flow variable:" var="flowVariableBarHeight" data-type="text" default-value= "" size="10" />
	<textfield label="bar error flow variable:" var="flowVariableBarError" data-type="text" default-value= "" size="10" />
	</hbox>

	<hbox>  #define x-axis, grid and color group
	xFactor = c(<listbox label="x-axis" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	facetBy = c(<listbox label="2D grid grouping parameters" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	colourBy = c(<listbox label="coloured by" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	<combobox var="colorPalette" items="ggplot default,Set1,Set2,Set3,Accent,Dark2,Paired,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd,KNIME colors" label="Color palette:"/>
	</hbox>
	
 	#diagram options
	<separator label="Layout Options General Plot" span="full"/>
	<hbox>
	plotTheme = <combobox items="grey,black-white,linedraw,light,classic" label="background/theme:"/>
	plotTextSize = as.numeric(c(<vector label="font size [plot]:" size="1" default-value="14"/>))
	twoDgridRow = c(<vector label="2D grid [row]:" size="1" default-value="-AUTO-"/>)
	twoDgridColumn = c(<vector label="2D grid [column]:" size="1" default-value="-AUTO-"/>)
	</hbox>

	<separator label="Layout Options Title" span="full"/>
	<hbox>
	<textfield label="plot title:" var="plotTitle" data-type="text" default-value= "" size="5"/>
	plotTitleSize = as.numeric(c(<vector label="text size [title]:" size="1" default-value="1.2"/>))
	</hbox>

	<separator label="Layout Options Axes" span="full"/>	
	<hbox>
	xAngle = as.numeric(c(<combobox label = "angle of x-axis labels:" items = "0,45,90"/>))
	axisTextSizeFactor = as.numeric(c(<vector label="axis text size [x/y]:" size="2" default-value="0.8,0.8"/>))
	</hbox>
	
	<hbox>
	<textfield label="y-axis title:" var="yAxisLabel" data-type="text" default-value= "" size="3"/>
	useParameternameAsAxisLabel = <checkbox label="use parameter name" selected="f"/>
	axisTitleSizeFactor = as.numeric(c(<vector label="axis title size [x/y]:" size="2" default-value="1.0,1.0"/>))
	</hbox>

	<hbox>
	useManualYaxisScale = <checkbox label="use fixed y-axis scale" selected="f"/>
	yAxisScale = as.numeric(c(<vector label="y-axis scale [min,max]:" size="2" default-value=","/>))
	free.scales = <checkbox label="use free y-scales (for 2D grid)" selected="t"/>
	</hbox>

	<hbox>
    yAxisScaleLog10 = <checkbox label="logarithmic y-axis scale" selected="f"/>
    yAxisTextLog10 = <checkbox label="logarithmic y-axis numbers" selected="f"/>
	</hbox>
	
	<separator label="Layout Options Legend" span="full"/>
	<hbox>
	legendPosition = <combobox label = "legend position:" items = "right,top,bottom,left,none"/>
	useLegendCoordinate = <checkbox label="use legend coordinate" selected="f"/>
	legendCoordinate = as.numeric(c(<vector label="coordinate [x,y]:" size="2" default-value="0.0,1.0"/>))
	</hbox>
	
	<hbox>
	legendTitle = <textfield label="legend title:" data-type="text" default-value="" size="3"/>
	legendTextSizeFactor = as.numeric(c(<vector label="text size [title,text]:" size="2" default-value="0.8,0.8"/>))
	rotateLegend = <checkbox label="rotate 90deg." selected="f"/>
	</hbox>

	</group>

	<![CDATA[
	#2.0 R code	

	#2.1 load libaries
	library(ggplot2)
	library(reshape)
	library(grid)
	library(RColorBrewer)
	library(scales)

	#2.2.1 manage RGG to R: define as numbers / check input parameters
	# check flow variables
	if (useFlowVar && !is.na(flowVariableBarHeight)) {
    	barHeight <- flowVariableBarHeight
	}
	if(plot.Errorbars && useFlowVar && !is.na(flowVariableBarError)) {
		barError <- flowVariableBarError
	}
	# no bar height columns selected
	if(is.null(barHeight)) stop("Error: Template initialization fails - no columns for bar height selected")
	# errorbars checked but no column selected
	if(plot.Errorbars & is.null(barError)) plot.Errorbars <- FALSE	# simply don't plot any errorbars
	if(plot.Errorbars & length(barHeight) != length(barError)) stop("Error: Template initialization fails - number of bar height columns not equal to number of error bar columns")
	# no xFactor selected
	if("-NO SELECTION-" %in% xFactor) xFactor <- NULL
	if("-NO SELECTION-" %in% facetBy) facetBy <- NULL
	if("-NO SELECTION-" %in% colourBy) colourBy <- NULL

	xFactorFlag <- facetFlag <- colourFlag <- FALSE
	if(is.null(xFactor)) xFactor <- "-ROW ID-"
	if(!is.null(xFactor) && "-USE COLUMN SELECTION-" %in% xFactor) { xFactorCol <- NULL; xFactorFlag <- TRUE } else xFactorCol <- xFactor
	if(!is.null(facetBy) && "-USE COLUMN SELECTION-" %in% facetBy) { facetCol <- NULL; facetFlag <- TRUE } else facetCol <- facetBy
	if(!is.null(colourBy) && "-USE COLUMN SELECTION-" %in% colourBy) { colourCol <- NULL; colourFlag <- TRUE } else colourCol <- colourBy

	useKNIMEColors <- colorPalette == "KNIME colors"

	# for brewer palettes check possible values
	nFactors <- length(colourCol)
	brewerTable <- do.call("cbind", brewer.pal.info)
	rownames(brewerTable) <- rownames(brewer.pal.info)
	if (colorPalette %in% rownames(brewerTable) && !useKNIMEColors) {
		if (brewerTable[which(rownames(brewerTable) == colorPalette),"maxcolors"] < nFactors) colorPalette <- "ggplot default"
	} else {
		warningMessage <- paste("Color set '", colorPalette, "' cannot be used for ", nFactors, " different values. Color palette is reset to ggplot default", sep = "")
		warning(warningMessage)
		colorPalette <- "ggplot default"
	}

	if(free.scales) free.scales <- "free_y" else free.scales <- "fixed"
	# 2D grid options (define rows and columns)
	if(is.na(as.numeric(twoDgridRow))) {twoDgridRow <- NULL  #e.g. is equal to "-AUTO-"
		} else twoDgridRow <- round(as.numeric(twoDgridRow))
	if(is.na(as.numeric(twoDgridColumn))) {twoDgridColumn <- NULL  #e.g. is equal to "-AUTO-"
		} else twoDgridColumn <- round(as.numeric(twoDgridColumn))
	
	#2.2.2 manage RGG to R: set scales to default and check scales
	if (is.na(plotTitle))	plotTitle <- NULL		#default if no title is given
	if (is.na(plotTextSize[1]) | (plotTextSize[1] < 0) | (plotTextSize[1] > 40)) plotTextSize[1] <- 14
	if (is.na(plotTitleSize[1]) | (plotTitleSize[1] < 0) | (plotTitleSize[1] > 5)) plotTitleSize[1] <- 1.2
	if (is.na(yAxisLabel))	yAxisLabel <- NULL
	if (is.na(xAngle))	xAngle <- 0
	if (is.na(axisTextSizeFactor[1]) | (axisTextSizeFactor[1] < 0) | (axisTextSizeFactor[1] > 5)) axisTextSizeFactor[1] <- 0.8
	if (is.na(axisTextSizeFactor[2]) | (axisTextSizeFactor[2] < 0) | (axisTextSizeFactor[2] > 5)) axisTextSizeFactor[2] <- 0.8
	if (is.na(axisTitleSizeFactor[1]) | (axisTitleSizeFactor[1] < 0) | (axisTitleSizeFactor[1] > 5)) axisTitleSizeFactor[1] <- 1
	if (is.na(axisTitleSizeFactor[2]) | (axisTitleSizeFactor[2] < 0) | (axisTitleSizeFactor[2] > 5)) axisTitleSizeFactor[2] <- 1
	if (is.na(yAxisScale[1]) | is.na(yAxisScale[2]))	yAxisScale <- NULL
	if (useParameternameAsAxisLabel) yAxisLabel <- barHeight
	if (is.na(legendCoordinate[1]) | is.na(legendCoordinate[2]) | (legendCoordinate[1] < 0) | (legendCoordinate[1] > 1) | (legendCoordinate[2] < 0) | (legendCoordinate[2] > 1)) useLegendCoordinate <- FALSE
	if (is.na(legendTextSizeFactor[1]) | (legendTextSizeFactor[1] < 0) | (legendTextSizeFactor[1] > 5)) legendTextSizeFactor[1] <- 0.8
	if (is.na(legendTextSizeFactor[2]) | (legendTextSizeFactor[2] < 0) | (legendTextSizeFactor[2] > 5)) legendTextSizeFactor[2] <- 0.8
	if (xAngle == 0 ) xAxisAjust <- c(0.5,1.0) #xAxisAjust = c(hjust,vjust)
	if (xAngle == 45) xAxisAjust <- c(1.0,1.0)	
	if (xAngle == 90) xAxisAjust <- c(1.0,0.5)	

	#2.3 calculate
	# create rowID column if needed
	if("-ROW ID-" %in% xFactorCol) kIn[,"-ROW ID-"] <- rownames(kIn)

	# combine columns if necessary
	if(length(xFactor) > 1) {
		xFactorCol <- paste(xFactor, collapse = " + ")
		kIn[,xFactorCol] <- apply(kIn[,xFactor], 1, paste, collapse = " + ")
	}
	if(length(facetBy) > 1) {
		facetCol <- paste(facetBy, collapse = " + ")
		kIn[,facetCol] <- apply(kIn[,facetBy], 1, paste, collapse = " + ")
	}
	if(length(colourBy) > 1) {
		colourCol <- paste(colourBy, collapse = " + ")
		kIn[,colourCol] <- apply(kIn[,colourBy], 1, paste, collapse = " + ")
	}

	# extract necessary data and reshape it
	meanData <- kIn[,c(barHeight,xFactorCol, facetCol, colourCol)]

	meanDataLong <- melt(meanData, measure.vars = barHeight, variable_name = "- PARAMETERS -")
	names(meanDataLong)[which(names(meanDataLong) == "value")] <- "height"

	#check if values/data is there, to prevent R error message
	if(length(which(!is.na(meanDataLong$height))) == 0){
		meanDataLong$height[1] <- 0
		plotErrorMessage <- TRUE
		} else {
		plotErrorMessage <-FALSE
	}

	# add errorbar data
	if(plot.Errorbars) {
		sdData <- kIn[,c(barError,xFactorCol, facetCol, colourCol)]
		sdDataLong <- melt(sdData, measure.vars = barError)
		meanDataLong$error <- sdDataLong$value
		if(plot.Errorbars.Negative) {
			meanDataLong$low <- with(meanDataLong, height - error)
		} else {
			meanDataLong$low <- with(meanDataLong, height)
		}
		if(plot.Errorbars.Plus) {
			meanDataLong$high <- with(meanDataLong, height + error)
		} else {
			meanDataLong$high <- with(meanDataLong, height)
		}
		if(yAxisScaleLog10) {
			meanDataLong[which(meanDataLong$low < 0),"low"] <- 0.000000001
		}
	}

	if(xFactorFlag) xFactorCol <- "- PARAMETERS -"
	if(facetFlag) facetCol <- "- PARAMETERS -"
	if(colourFlag) colourCol <- "- PARAMETERS -"
	
	if(is.na(legendTitle)) legendTitle <- colourCol		#default if no title is given

	#convert to discrete format
	if(!is.null(facetBy)) { 
		facetTitle <- facetCol
		meanDataLong$template.facet.column <- factor(meanDataLong[,facetCol])
		facetCol <- "template.facet.column" 
	}
	if(!is.null(colourBy)) meanDataLong[,colourCol] <- factor(meanDataLong[,colourCol])
	meanDataLong[,xFactorCol] <- factor(meanDataLong[,xFactorCol])
	
	meanDataLong[,"ggplot_groupid"] <- 1 : nrow(meanDataLong)

	#2.4.1 plot
	p <- ggplot(meanDataLong, aes(x = get(xFactorCol), y = height, group = ggplot_groupid))

	my.dodge <- position_dodge(width=0.9)
	if(!is.null(colourBy)) {
		p <- p + geom_bar(aes(fill = get(colourCol)), stat = "identity", position = my.dodge, colour = "black")
	} else {
		p <- p + geom_bar(stat = "identity", position = my.dodge, colour = "black", fill = "grey")
	}
	if(plot.Errorbars) p <- p + geom_errorbar(aes(ymin = low, ymax = high), position = my.dodge, width = 0.35)

	if(!is.null(facetBy)) {
		p <- p + facet_wrap(~ template.facet.column, nrow = twoDgridRow, ncol = twoDgridColumn, scales=free.scales)
		fTitle <- paste("Grid factor: ",facetTitle,sep = "")
		if(!is.null(plotTitle)) plotTitle <- paste(plotTitle,fTitle,sep = " / ") else plotTitle <- fTitle
		p <- p + ggtitle(plotTitle)
		} else {
		if(!is.null(plotTitle)) p <- p + ggtitle(plotTitle)
	}
	
	#2.4.1 layout plot
	#general
	if(plotTheme == "grey")	p <- p + theme_grey(base_size=plotTextSize[1])
	if(plotTheme == "black-white")	p <- p + theme_bw(base_size=plotTextSize[1])
	if(plotTheme == "linedraw")	p <- p + theme_linedraw(base_size=plotTextSize[1])	
	if(plotTheme == "light")	p <- p + theme_light(base_size=plotTextSize[1])
	if(plotTheme == "classic")	p <- p + theme_classic(base_size=plotTextSize[1])

	#2.4.2 set general layout of plot
	#title options
	p <- p + theme(plot.title = element_text(size = plotTextSize[1] * plotTitleSize[1]))

	#axis label options
	p <- p + scale_x_discrete(name = xFactorCol)
	p <- p + theme(axis.title.x = element_text(size = plotTextSize[1] * axisTitleSizeFactor[1]), axis.title.y = element_text(size = plotTextSize[1] * axisTitleSizeFactor[2]))
	p <- p + theme(axis.text.x = element_text(angle = xAngle, hjust = xAxisAjust[1], vjust = xAxisAjust[2], size = plotTextSize[1] * axisTextSizeFactor[1]), axis.text.y = element_text(size = plotTextSize[1] * axisTextSizeFactor[2]))

	# fixing the y-axis labeling, make parameter name or custom y-axis label instead of "height", only if no multi-parameteric plot and only if no y-Axis label was added in the GUI
	if(((!is.null(facetBy) && "-USE COLUMN SELECTION-" %in% facetBy )|| length(barHeight) > 1) && is.null(yAxisLabel)) yAxisLabel <- "height"
	
	#if(useManualYaxisScale) p <- p + scale_y_continuous(limits = yAxisScale, name = yAxisLabel) #use e.g. limits = c(0,100)
	if(useManualYaxisScale) p <- p + coord_cartesian(ylim = yAxisScale)  # this does not crop the data like "limits" parameter

	if(yAxisScaleLog10) {
		p <- p + scale_y_log10(name = yAxisLabel)   # do y-axis in log 10 scale
		if(yAxisTextLog10) p <- p + scale_y_log10(name = yAxisLabel, breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
	} else {
		p <- p + scale_y_continuous(name = yAxisLabel)   # do normal y-axis 
		if(yAxisTextLog10) p <- p + scale_y_continuous(name = yAxisLabel, breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) 
	}

# color model checks: is it available? is it defined for the grouping column?
	if(useKNIMEColors && !exists("kIn.color.model")) {
		stop("No KNIME color model provided. Script was stopped!")
		useKNIMEColors <- FALSE
	}
	if(useKNIMEColors && names(kIn.color.model[1]) != colourCol) {
		stop(paste("KNIME color model is different (", names(kIn.color.model[1]), ") from selected color grouping column (", colourCol, ") in template. Script was stopped!"))
		useKNIMEColors <- FALSE
	} 
	if(useKNIMEColors) {
		kIn.color.model$color <- as.character(kIn.color.model$color)
		colourCol <- names(kIn.color.model)[1]
		factorColors <- kIn.color.model[,2]
		names(factorColors) <- kIn.color.model[,1]
	}
	
	# color settings		
	if(useKNIMEColors) {
		p <- p + scale_color_manual(name = colourCol, values = factorColors)
		p <- p + scale_fill_manual(name = colourCol, values = factorColors)
	} else {
		if(colorPalette == "ggplot default") {
			p <- p + scale_color_discrete(name = colourCol)
			p <- p + scale_fill_discrete(name = colourCol)
		} else {
			p <- p + scale_color_brewer(name = colourCol, palette = colorPalette) 
			p <- p + scale_fill_brewer(name = colourCol, palette = colorPalette)
		}
	}
	
	#legend: legend title, text style and rotation
	p <- p + guides(fill = guide_legend(title = legendTitle)) + theme(legend.title = element_text(size = plotTextSize[1] * legendTextSizeFactor[1], face = "bold"), legend.text = element_text(size = plotTextSize[1] * legendTextSizeFactor[2]))
	
	if(rotateLegend) p <- p + guides(fill = guide_legend(title = legendTitle, direction = "horizontal", title.position = "top", label.position = "bottom", label.hjust = 0.5, label.vjust = 0.5, label.theme = element_text(angle = 90)))
	if (useLegendCoordinate) {
		p <- p + theme(legend.position = legendCoordinate, legend.background = element_rect(fill = "transparent",colour = NA))
	} else {
		p <- p + theme(legend.position = legendPosition) 
	}
	
	if(plotErrorMessage) p <- p + ggtitle("ERROR: NO DATA!!!")
	
	print(p)

    ]]>
</rgg>
########################################################################################
# name: Boxplot (with configuration and flow variable option)
# author: Holger Brandl, Martin Stoeter
# category: basic/boxplots
# preview: simpleboxplot.png

A simple box plot with Options:
- set the y-axis limits (default: none (=automatic); min AND max values are neccessary, if you want to set limits)
- set the magnification factor to be used for axis annotation (default: 1) or set automatically according to number of x-axis factors
- set color of histogram or line (default: lightblue; see colors here http://research.stowers-institute.org/efg/R/Color/Chart/)
- set outer margins in lines of text (vector of form (bottom, left, top, right) corresponding to command "oma" in R)
- to use a flow variable check box and type in variable name using the format: FLOWVAR(variable name)

######
<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

<hbox>
numAttributeName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Numeric variable"/>;
<checkbox  label="use flow variable" var="useFlowVar" selected="false"/>
<textfield label="flow variable:" var="flowVariable" data-type="text" default-value= "" size="10" span="full"/>
</hbox>

rawFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis factor"/>;
<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "" size="10" span="full"/>
useVerticalLabels =  <checkbox label="Use vertical labels" span="2" selected="false"/>;

<hbox>
<textfield label="y-axis title:" var="yAxisLabel" data-type="text" default-value= "" size="3"/>
useParameternameAsAxisLabel = <checkbox label="use numeric variable name" selected="t"/>
</hbox>

<vector label="y-axis scale:" var="yScale" size="2" vector-type="character"/>

<separator label="Text macnification factors" span="full"/>
<hbox>
<textfield label="Title:" var="mainTitleScale" data-type="number" default-value="1.4"/>
<textfield label="Axis label:" var="axisLabelScale" data-type="number" default-value="1.2"/>
<textfield label="Axis annotation:" var="axisAnnotationScale" data-type="number" default-value="1"/>
<checkbox  label="Auto-magnification factor" var="useAutoAxisAnnotationScale" selected="false"/>
</hbox>

<separator label="Color ann margins" span="full"/>
<textfield label="Color of boxes:" var="color" data-type="text" default-value= "lightblue" size="5"/>
<vector label="Margins (bottom, left, top, right):" var="margins" size="4" default-value="7,1,1,1" vector-type="character"/>

</group>


# 2. r-code

<![CDATA[

#1. load libaries

#2.1 manage RGG to R: define as numbers

#define as numbers
yScale <- as.numeric(yScale)
margins <- as.numeric(margins)
mainTitleScale <- as.numeric(mainTitleScale)
axisLabelScale <- as.numeric(axisLabelScale)
axisAnnotationScale <- as.numeric(axisAnnotationScale)


#2.2 manage RGG to R: set scales to default and check scales

#set scales to default and check scales 
if (is.na(yScale[1]) | is.na(yScale[2])) 	yScale <- NULL		#default
if (is.na(color)) color <- 'lightblue'
if (is.na(margins[1]) | is.na(margins[2]) | is.na(margins[3]) | is.na(margins[4])) 	margins <- c(7,1,1,1)	#default
if (useFlowVar) numAttributeName = flowVariable
if (useParameternameAsAxisLabel) yAxisLabel <- numAttributeName
if (is.na(mainTitleScale) | mainTitleScale <= 0) mainTitleScale <- 1.4	#default
if (is.na(axisLabelScale) | axisLabelScale <= 0) axisLabelScale <- 1.2	#default
if (is.na(axisAnnotationScale) | axisAnnotationScale <= 0) axisAnnotationScale <- 1.0	#default

#3. calculate
numAttribute <- kIn[,which(names(kIn) == numAttributeName)]

factor = factor(rawFactor, levels=unique(rawFactor))

#set auto axis annotation scale
if ((useAutoAxisAnnotationScale) && (length(levels(factor)) > 80)) axisAnnotationScale <- sqrt(80)/sqrt(length(levels(factor))) 


#4.1 layout plot 
par(oma=margins)

#4.2 plot data

if(length(kIn[which(!is.na(numAttribute)),1]) > 0) {#check if data is there	
	boxplot(numAttribute ~ factor, main = plotTitle, col = color, ylim = yScale, ylab = yAxisLabel, cex.main = mainTitleScale, cex.lab = axisLabelScale, cex.axis = axisAnnotationScale, las = ifelse(useVerticalLabels, 2, 1));
	} else {
	plot(0,0, main = plotTitle, col = color, ylab = yAxisLabel, las = ifelse(useVerticalLabels, 2, 1))	
	text(0,0,"no data", col = "black")
	}

]]>

</rgg>
########################################################################################
# name: Multi-parameteric parallel boxplot grid 
# author: Holger Brandl
# category: _deprecated/basic/boxplots
# preview: multipar-boxplotgrid.png


A grid of parallel boxplots, one for each selected assay parameter. The number of actual parallel boxplots is defined by a categorical variable (like a well-treatment)


######



<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define your categorical variable of interest
# make sure that the sorting of the data is being preserved
rawFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="X-axis factor"/>;
catVar = factor(rawFactor, levels=unique(rawFactor));



# b) Define your assay parameters of interest
params =  which(names(kIn) %in% c(<panellistbox label="Assay parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>));

</group>


# 2. r-code

<![CDATA[

library(grid)

# slim down your dataset if necessary
#kIn <- subset(kIn, treatment != "jak3 inhibitor" && librarycode == "ADD");

numGridRows = 2;
par(mfrow = c(numGridRows, ceiling(length(params) / numGridRows)))
par(oma=c(1,3,1,1)); # the 3 defines the length of the labels, just increase it if necessary

# iterate over all parameters and create plots for all of them
lapply(params, FUN = function (param) {

	boxplot(eval(parse(text = paste("kIn$\"", names(kIn)[param], "\"", sep = ''))) ~ catVar, horizontal = TRUE, las = 2, col = c('lightblue') )
	title(names(kIn[param]));

})

]]>

</rgg>
########################################################################################
# name: Notched Boxplot
# author: Holger Brandl
# category: basic/boxplots
# preview: notched-boxplot.png

A boxplot with notches that indicate significant differences of the median between groups in case of equal sample sizes. Refer to the R-documentation or further details.

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

numAttribute = kIn$<combobox items="$$$NUM_ATTRIBUTES$$$" label="Numeric variable"/>;

# make sure that the sorting of the data is being preserved
rawFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis factor"/>;
factor = factor(rawFactor, levels=unique(rawFactor));

<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value="" size="10" span="full" />

useVerticalLabels =  <checkbox label="Use vertical labels" span="2" selected="false"/>;

</group>


# 2. r-code

<![CDATA[

boxplot(numAttribute ~ factor, notch = TRUE, main = plotTitle, las = ifelse(useVerticalLabels, 2, 1));

]]>

</rgg>
########################################################################################
# name: Parallel Boxplot grid (with flow variable option)
# author: Holger Brandl, modified Martin Stoeter
# category: basic/boxplots
# preview: lattice-boxplotgrid.png

A grid of parallel boxplots.

Inputs
1) The parameter that is plotted 
2) A categorial variable which defines the number of parallel boxplots (X-axis factor)
3) A categorial variable which defines the grouping into the different grids
- to use a flow variable check box and type in variable name using the format: FLOWVAR(variable name)

######
<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>
<hbox>
numAttributeName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Parameter of interest"/>
<checkbox  label="use flow variable 1" var="useFlowVarNumAttributeName" selected="false"/>
<textfield label="flow variable 1:" var="flowVariableNumAttributeName" data-type="text" default-value= "" size="10" span="full"/>
</hbox>

<hbox>
rawFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="X-axis factor"/>
<checkbox  label="use flow variable 2" var="useFlowVarRawFactor" selected="false"/>
<textfield label="flow variable 2:" var="flowVariableRawFactor" data-type="text" default-value= "" size="10" span="full"/>
</hbox>

<hbox>
gridFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="Grid-factor"/>
<checkbox  label="use flow variable 3" var="useFlowVarGridFactor" selected="false"/>
<textfield label="flow variable 3:" var="flowVariableGridFactor" data-type="text" default-value= "" size="10" span="full"/>
</hbox>
</group>

<![CDATA[

# 2. r-code

#1.0. load libaries
library(lattice)
library(grid)

#2.1 manage RGG to R: define as numbers

#2.2 manage RGG to R: set scales to default and check scales
if (useFlowVarNumAttributeName) numAttributeName <- flowVariableNumAttributeName
if (useFlowVarRawFactor) rawFactor <- flowVariableRawFactor
if (useFlowVarGridFactor) gridFactor <- flowVariableGridFactor

#3. calculate
parallelFactor <- factor(rawFactor, levels=unique(rawFactor));
numAttribute = eval(parse(text = paste("kIn$\"", numAttributeName, "\"", sep = '')))

#4.1 layout plot

#4.2 plot data
m <- bwplot(factor(parallelFactor) ~ numAttribute | factor(gridFactor), xlab = numAttributeName)
print(m, newpage=FALSE, pretty=FALSE)

]]>
</rgg>
########################################################################################
# name: Factorized density grid, KNIME colors
# author: Holger Brandl, modified by Martin Stoeter
# category: basic/histograms
# preview: factorized_density_plot_grid.png

Creates a grid of density plots for selected columns and plots densities for each factor (group).

1) Select numerical variables. Each variable will result in a subplot. Multiple parameters are plotted as grid of subplots. 
 - To use a flow variable check box and type in variable name using the format: FLOWVAR(variable name) (doesn't work like this for grid of subplots)
2) Select a column that contains the factors/groups of densities to plot.

Options for visualization:
a) how to plot the colors (fill densities or lines).
b) color palette the is used (KNIME colors: if colors were assigned to categories in KMIME and attached to the data table (Color Manager -> Extract Colors -> Join), R will use the R, G, B, A columns to generate the colors for the categories)
c) Select if background should be white.
d) optional title and whether parameter name should be plotted in title 
######
<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

#1.0 Parameter selection

<group>

# a) Define your numerical attribute of interest
params = c(<panellistbox label="Numerical attributes" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

<hbox>
<checkbox  label="use flow variable" var="useFlowVar" selected="false"/>
<textfield label="flow variable:" var="flowVariable" data-type="text" default-value="" size="10"/>
</hbox>

<gaprow height="1"/>

# b) Define the grouping factor
factorName = c(<combobox items="$$$STR_ATTRIBUTES$$$" selected-item="treatment" label="Factor"/>)

<gaprow height="1"/>

# c) Options for visualization
<separator label="more layout options" span="full"/>
<gaprow height="1"/>

<hbox>
# d) Define the colour of fill or line
<checkbox label="Plot lines instead of fill densities" var="plotLineColour" selected="false"/>

# c) Define the colour of fill or line
colorPalette = <combobox items="standard,clarity,Accent,Dark2,Paired,Set1,Set2,Set3,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd,KNIME colors" label="Color palette:"/>

# e) Define the colour of fill or line
<checkbox label="White background?" var="setBkgWhite" selected="false"/>
</hbox>

<hbox>
# e) set title
<textfield label="Title of plot:" var="title" data-type="text" default-value= "" size="1"/>
<checkbox label="Join parameter name with title?" var="useJoinParameterToTitle" selected="false"/>
</hbox>

</group>

<![CDATA[

#2.0 R code

#2.1.1 load libaries
library(ggplot2)
library(grid)

#2.1.2 Define the data
#Define the (factor)
factorIndex <- which(names(kIn) %in% factorName)
factors <- levels(factor(kIn[, factorName]))
if (useFlowVar) params <- flowVariable

#2.2.1 manage RGG to R: define as numbers

#2.2.2 manage RGG to R: set scales to default and check scales
if (is.na(title)) title <- NULL
#check if color model is joined to data table
if (colorPalette == "KNIME colors") {
	if (!length(which(c("R","G","B","A") %in% names(kIn))) == 4) colorPalette <- "standard"
	} 

#2.3 calculate
if (colorPalette == "KNIME colors") {
	#generate color table from KNIME colors
	colorTable <- lapply(factors, FUN = function(x) {
		subdata <- subset(kIn, kIn[, factorName] == x, select = c(R, G, B, A, RGBA), drop = FALSE)[1,]
		})
	names(colorTable) <- factors
	colorTable <- do.call("rbind", colorTable)
	factorColors <- rgb(colorTable$R, colorTable$G, colorTable$B, colorTable$A, names = NULL, max =  255) 
	} else {
	factorColors <- colors()[c(185,121,150,100,48,490,98, round(runif(50,min=1, max = 600)))] #default definition of colors	
	}

#reshape table and column names to make it work with ggplot(aes_string(...))
params <- which(names(kIn) %in% params)
plotData <- kIn
plotData[,factorIndex] <- as.character(plotData[, factorIndex])  #make factor column String in case it is integer!
origNames <- names(kIn)

#new ggplot compatible column names
names(plotData) <- paste("p", as.character(1:length(names(plotData))), sep ='')
factorName <- names(plotData)[factorIndex]

#2.4.1 layout plot
numGridRows = ifelse(length(params) > 1, 2, 1)
numGridCols = ceiling(length(params) / numGridRows)

grid.newpage()
pushViewport(viewport(layout=grid.layout(numGridRows, numGridCols)))

vplayout<-function(x,y) viewport(layout.pos.row = x, layout.pos.col=y)

#2.4.2 plot data
# iterate over all parameters and create plots for all of them

lapply(params, FUN = function (param) {

	if (plotLineColour) {
		#plot colored lines
		m <- ggplot(plotData, aes_string(x = names(plotData)[param], colour = names(plotData)[factorIndex])) + geom_density()
		switch(which(colorPalette == c('standard','clarity','KNIME colors','Set1','Set2','Set3','Set4')), {
			}, { #standard
			if(length(factors) < 9) m <- m + scale_colour_brewer("clarity")}, { #clarity
			m <- m + scale_colour_manual(name = origNames[factorIndex], breaks = factors, labels = factors, values = factorColors)}, { #Knime colors
			if(length(factors) < 9) m <- m + scale_colour_brewer(name = origNames[factorIndex], palette = "Set1")}, { #Set1
			if(length(factors) < 9) m <- m + scale_colour_brewer(name = origNames[factorIndex], palette = "Set2")}, { #Set2
			if(length(factors) < 9) m <- m + scale_colour_brewer(name = origNames[factorIndex], palette = "Set3")}, { #Set3
			if(length(factors) < 9) m <- m + scale_colour_brewer(name = origNames[factorIndex], palette = "Set4")}    #Set4
			)
		} else {
		#plot colored densities
		m <- ggplot(plotData, aes_string(x= names(plotData)[param], fill= names(plotData)[factorIndex])) +  geom_density(alpha= 0.4)
		switch(which(colorPalette == c('standard','clarity','KNIME colors','Set1','Set2','Set3','Set4')), {
			}, { #standard
			if(length(factors) < 9) m <- m + scale_fill_brewer("clarity")}, { #clarity
			m <- m + scale_fill_manual(name = origNames[factorIndex], breaks = factors, labels = factors, values = factorColors)}, { #Knime colors
			if(length(factors) < 9) m <- m + scale_fill_brewer(name = origNames[factorIndex], palette = "Set1")}, { #Set1
			if(length(factors) < 9) m <- m + scale_fill_brewer(name = origNames[factorIndex], palette = "Set2")}, { #Set2
			if(length(factors) < 9) m <- m + scale_fill_brewer(name = origNames[factorIndex], palette = "Set3")}, { #Set3
			if(length(factors) < 9) m <- m + scale_fill_brewer(name = origNames[factorIndex], palette = "Set4")}    #Set4
			)
		}

	#set the title to the unmodified attribute-name
	if (useJoinParameterToTitle) title <- paste(title, origNames[param])
	m <- m + xlab(origNames[param]) + labs(fill = origNames[factorIndex]) + ggtitle(title)
   	
	plotNum <- which(params == param)
	curRow <- ceiling(plotNum/numGridCols)
	curCol <- ceiling(plotNum - numGridCols * (curRow-1))
	#set background on/off
	if (setBkgWhite) m <- m + theme_bw()

	print(m, vp=vplayout(curRow, curCol))
})

]]>
</rgg>
########################################################################################
# name: Histogram
# author: Holger Brandl, Martin Stoeter
# category: basic/histograms
# preview: simple_histogram.png

Displays a histogram (distribution) of a numerical attribute.
Allows modification of bins, axis, color, and optional probability density

Options:
- set number of bins: (default: 15)
- set the x and y-axis limits (default: none (=automatic); min AND max values are neccessary, if you want to set limits)
- y-axis is probability density (default: false (=frequency)
- plot density line (default: false)
- set color of histogram or line (default: black; see colors here http://research.stowers-institute.org/efg/R/Color/Chart/)

######

<rgg>

    <!--1. Title and short description -->

    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>

    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
    <gaprow height="1"/>

    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    # 1. Parameter selection

    <group>

    numAttributeName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Variable of interest"/>;
    <textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "my plot" size="10" span="full"/>
    <textfield label="Number of bins:" var="bins" data-type="number" default-value="15"/>
    <textfield label="Color of histogram:" var="color" data-type="text" default-value= "black" size="5"/>
    <vector label="y-axis scale:" var="yScale" size="2" vector-type="character"/>
    <vector label="x-axis scale:" var="xScale" size="2" vector-type="character"/>
    <checkbox label="Probability density" var="probability" selected="false"/>
    <checkbox label="Draw density" var="drawDensity" selected="false"/>
    <textfield label="Color of density line:" var="densityColor" data-type="text" default-value= "black" size="5"/>

    </group>


    # 2. r-code

    <![CDATA[
    numAttribute = eval(parse(text = paste("kIn$\"", numAttributeName, "\"", sep = '')))
    bins <- as.numeric(bins)

    #define as numbers
    yScale <- as.numeric(yScale)
    xScale <- as.numeric(xScale)

    #set scales to default and check scales
    if (is.na(yScale[1]) | is.na(yScale[2])) 	yScale <- NULL		#default
    if (is.na(xScale[1]) | is.na(xScale[2])) 	xScale <- range(numAttribute)	#default
    if (probability) yScale <- NULL

    #plot histogram
    hist(numAttribute, density=30.0, angle=45, xlab=numAttributeName, main=plotTitle, breaks = bins, col = color, ylim = yScale, xlim = xScale, freq = !probability)

    #plot density line
    if (drawDensity) lines(density(numAttribute), col = densityColor)

    ]]>

</rgg>
########################################################################################
# name: Histogram grid
# author: Holger Brandl
# category: basic/histograms
# preview: histogram-grid.png

Creates a grid containing a number densityplots, each for a different feature dimension. Within each plot the densities are factorized according to a chosen grouping factor.

1) A selection of numerical variables. Each variable will result in a subplot. 

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define your numerical attribute of interest
params = which(names(kIn) %in% c(<panellistbox label="Numerical attributes" items="$$$NUM_ATTRIBUTES$$$"
                                             span="full"/>));

# c) Define the number of bins
numBins = as.numeric(<textfield label="Number of bins" var="" data-type="number" default-value= "30" size="10" span="full"/>);

</group>


<![CDATA[

library(ggplot2)
library(grid)


# convert operator chars in attribute names to underscores
replaceInvalidVarNameChars <- function(x){
    gsub("[)]", "_", gsub("[(]", "_", gsub("[/]", "_", gsub("[+]", "_", gsub("-", "_", gsub(" ", "_",x))))))
}

origNames <- names(kIn);
names(kIn) <- replaceInvalidVarNameChars(names(kIn));


numGridRows = ifelse(length(params) > 1, 2, 1);
numGridCols = ceiling(length(params) / numGridRows);

grid.newpage()
pushViewport(viewport(layout=grid.layout(numGridRows, numGridCols)));

vplayout<-function(x,y) viewport(layout.pos.row = x, layout.pos.col=y);

# iterate over all parameters and create plots for all of them

lapply(params, FUN = function (param) {

	varName = names(kIn)[param];
	varVect = eval(parse(text = paste("kIn$\"", varName, "\"", sep = '')));
	dataRange = range(varVect, na.rm=TRUE);
	rangeWidth = dataRange[2] - dataRange[1];

	m <- ggplot(kIn, aes_string(x= names(kIn)[param])) + geom_histogram(binwidth= rangeWidth/numBins) + geom_density();

    #set the title to the unmodified attribute-name
    m <- m + xlab(origNames[param]);

	plotNum<- which(params== param);
	curRow <- ceiling(plotNum/numGridCols);
	curCol <- ceiling(plotNum - numGridCols*(curRow-1));

	print(m, vp=vplayout(curRow, curCol));
});


]]>

</rgg>
########################################################################################
# name: Stacked Histogram
# author: Holger Brandl, modified by Antje Niederlein
# category: basic/histograms
# preview: stacked-histogram.png

Displays a stacked histogram (distribution) of a numerical attribute.
Allows modification of number of bins.

######

<rgg>

    <!--1. Title and short description -->

    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
    <gaprow height="1"/>


    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    # 1. Parameter selection

    <group>

    # a) Define the attribute of interest
    numAttributeName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Variable of interest"/>;
    numAttributeIndex = which(names(kIn) ==  numAttributeName);

    # 2) Define the label-column (factor)
    labelVariable = <combobox items="$$$STR_ATTRIBUTES$$$" label="Factor"/>;
    labelVariableIndex = which(names(kIn) ==  labelVariable);

    # c) the title of the plot
    <textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value="my plot" size="10" span="full"/>

    # d) binwidth
    <textfield var="bw"  label="binwidth" data-type="number" default-value = "15" size="5"/>

    </group>


    # 2. r-code

    <![CDATA[

    library(ggplot2)

    bw <- as.numeric(bw)
    newdata <- data.frame(readout = kIn[,numAttributeIndex], groupby = kIn[,labelVariableIndex])

    dataRange <- range(newdata$readout, na.rm = TRUE)
    extend <- dataRange[2]-dataRange[1]

    m <- ggplot(newdata, aes(x=readout, y = ..density.., fill=groupby)) +  ggtitle(plotTitle) + geom_histogram(binwidth = extend/bw) + xlab(numAttributeName)

    print(m)


    ]]>

</rgg>
########################################################################################
# name: Violin Plot
# author: Martin Stoeter
# category: basic/histograms
# preview: ViolinPlot.png

Creates a Violin plot: for a selected columns and densities for each factor (group).

1) Select numerical variable / parameter
 - To use a flow variable check box and type in variable name using the format: FLOWVAR(variable name)
2) Select a column that contains the factors/groups of densities to plot.

Options for visualization:
a) adjust y-axis: default = min-max +/- 5%; optional use of quantiles = (lower quantile * lower scale factor) until (upper quantile * upper scale factor)
	  extended range factor: e.g. 0.05 extends y-axis by +/- 5%   
b) optional title and whether parameter name should be plotted in title 
######
<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

#1.0 Parameter selection

<group>

# a) Define your numerical attribute of interest
params = c(<combobox items="$$$NUM_ATTRIBUTES$$$" label="Numerical attributes"/>)

<hbox>
<checkbox  label="use flow variable" var="useFlowVar" selected="false"/>
<textfield label="flow variable:" var="flowVariable" data-type="text" default-value="" size="10"/>
</hbox>

<gaprow height="2"/>

# b) Define the grouping factor
factorName = c(<combobox items="$$$STR_ATTRIBUTES$$$" selected-item="treatment" label="Factor"/>)

<gaprow height="1"/>
</group>

<group>
# c) Options for visualization
<separator label="more layout options" span="full"/>
<gaprow height="1"/>

<separator label="                                                                                       y-axis scale factors: [lower quantile, upper quantile, lower scale factor, upper scale factor, extended range]" aligment="right" span="full"/>
<hbox>
<checkbox label="Default y-Axis scale?" var="useDefaultyAxisScale" selected="true"/>
<vector label="y-axis scale factors:" var="yAxisScaleFactors" size="5" default-value="0.005,0.995,1,1,0" vector-type="character"/>
</hbox>

<hbox>
# e) set title
<textfield label="Title of plot:" var="title" data-type="text" default-value= "" size="1"/>
<checkbox label="Join parameter name with title?" var="useJoinParameterToTitle" selected="false"/>
</hbox>

</group>

<![CDATA[

#2.0 R code

#2.1.1 load libaries
library(ggplot2)

#2.1.2 Define the data
#Define the (factor)
factorIndex <- which(names(kIn) %in% factorName)
factors <- levels(factor(kIn[, factorName]))
if (useFlowVar) params <- flowVariable

#2.2.1 manage RGG to R: define as numbers
yAxisScaleFactors <- as.numeric(yAxisScaleFactors)

#2.2.2 manage RGG to R: set scales to default and check scales
if (is.na(yAxisScaleFactors[1]) | (yAxisScaleFactors[1] < 0) | (yAxisScaleFactors[1] >= 1)) yAxisScaleFactors[1] <- 0
if (is.na(yAxisScaleFactors[2]) | (yAxisScaleFactors[2] <= 0) | (yAxisScaleFactors[2] > 1)) yAxisScaleFactors[2] <- 1
if (is.na(yAxisScaleFactors[3])) yAxisScaleFactors[3] <- 1
if (is.na(yAxisScaleFactors[4])) yAxisScaleFactors[4] <- 1
if (is.na(yAxisScaleFactors[5]) | (useDefaultyAxisScale)) yAxisScaleFactors[5] <- 0.05

if (is.na(title)) title <- NULL

#2.3 calculate
#reshape table and column names to make it work with ggplot(aes(...))
paramIndex <- which(names(kIn) %in% params)
origNames <- names(kIn)

#new ggplot compatible column names
names(kIn)[paramIndex] <- "paramRinternalColumnName"
names(kIn)[factorIndex] <- "treatmentRinternalColumnName"

#set y-axis scale
	if (useDefaultyAxisScale) {
		yAxisScale <- extendrange(kIn[, paramIndex], f = yAxisScaleFactors[5])
		} else {
		yAxisScale <- c(quantile(kIn[, paramIndex], na.rm = TRUE, names = FALSE, yAxisScaleFactors[1]), quantile(kIn[, paramIndex], na.rm = TRUE, names = FALSE, yAxisScaleFactors[2])) * c(yAxisScaleFactors[3], yAxisScaleFactors[4])
		#check if data is there/yAxisScales are numbers (otherwise plot fails) then do subplot without data (no points are plotted)
		if ((is.na(yAxisScale)[1] == TRUE) || (is.na(yAxisScale)[2] == TRUE)
			|| (is.infinite(yAxisScale)[1] == TRUE) || (is.infinite(yAxisScale)[2] == TRUE)) {
			yAxisScale <- extendrange(kIn[, paramIndex], f = yAxisScaleFactors[5])
			} else {
			yAxisScale <- extendrange(r = yAxisScale, f = yAxisScaleFactors[5])
			}
		}

#2.4.1 layout plot

#2.4.2 plot data

	m <- ggplot(kIn, aes(x = paramRinternalColumnName)) + stat_density(aes(ymax = ..density..,  ymin = -..density..), fill = "grey50", colour = "grey20", geom = "ribbon", position = "identity") 
	m <- m + scale_x_continuous(limits = yAxisScale)
	m <- m + theme(axis.text.x  = element_text(angle=90, hjust=1.2, size=8))
	m <- m + facet_grid(. ~ treatmentRinternalColumnName) + coord_flip() + theme(panel.grid.minor=element_blank())

	if (useJoinParameterToTitle) title <- paste(title, origNames[paramIndex])
	m <- m + xlab(origNames[paramIndex]) + labs(fill = origNames[factorIndex]) + ggtitle(title)	

	print(m)

]]>
</rgg>
########################################################################################
# name: Association Plot
# author: Holger Brandl
# category: basic/others

######

% insert a list of numerical attributes
assocplot(cbind($$ATTRIBUTES$), space=0.5, col=c("black", "red"))
########################################################################################
# name: Cleveland Dot Plot
# author: Holger Brandl
# category: basic/others

######

dotchart($$ATTRIBUTE$, pch='*', "xlab="my label")
########################################################################################
# name: ROC curves
# author: Martin Stoeter
# category: basic/others
# preview: ROC.png

Plots ROC curves (receiver operating characteristic) for several case groups (TP=true positives) against one controls group (TN=true negatives) for each parameter. This results in a curve with "sensitivity" = TPR(true positive rate) on y-axis and "1-specificity" = FPR (false positive rate) on the x-axis.

1) Select numerical variables for ROC curves (parameter).
2) Template expects a column named "treatment" as category column. Enter the name of the negative control class as plain text. Select several classes as positive controls (cases) that will be plotted against the single negative control class (controls).

Options for visualization:
a) plot method can be "automatic" (=done with R package "pROC") or "manual" (=plotted point by point). For "manual" controls and cases will be assigned automatically; then controls and cases will be swapped if median(controls) > median(cases).
b) enter the title of the plot and check if the parameter name should be in the title as well.
c) enter the x-axis label and check if the name of negative control group should be in the x-axis as well
d) enter the y-axis label
e) set aspect ratio (height/width), depends on pixel dimensions in "output option" tab (default:=700/1000)
f) scale the legend (default:=1) and set position
######
<rgg>
<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

#1.0 Parameter selection

<group>
# a) Define your numerical attribute of interest
parameter = c(<panellistbox label="Numerical attributes for ROC" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

<gaprow height="1"/>
# b) Define the treatment column, needs further development
category = c(<combobox items="$$$STR_ATTRIBUTES$$$" selected-item="treatment" label="Category Column:"/>)

# c) Define the controls group factor (negative controls)
<textfield label="Negative control:" var="controlVar" data-type="text" default-value= "UT" size="1"/>

# d) Define the case group factor (positve controls)
caseVar = c(<listbox items="$$$DOMAIN('treatment')$$$" selected-item="treatment" label="Positive control:" visible-row-count="7"/>)

<gaprow height="1"/>

# e) Options for visualization
<separator label="more layout options" span="full"/>
<gaprow height="1"/>

<hbox>
plotMethod = c(<combobox items="automatic,manual" selected-item="automatic" label="Plot method:"/>)
controlCaseDirection = c(<combobox items="automatic,as_it_is" selected-item="automatic" label="Direction of comparison:"/>)
</hbox>

<hbox>
<textfield label="Title of plot:" var="titleLabel" data-type="text" default-value= "ROC analysis" size="1"/>
<checkbox label="Join parameter name with title?" var="useJoinParameterToTitle" selected="true"/>
</hbox>
<hbox>
<textfield label="x-axis:" var="xAxisLabel" data-type="text" default-value= "1-sensitivity" size="1"/>
<checkbox label="Join negative control name with x-axis?" var="useJoinNegativeControlToXAxis" selected="true"/>
</hbox>
<textfield label="y-axis:" var="yAxisLabel" data-type="text" default-value= "specificity" size="1"/>
<hbox>
<textfield label="Aspect ratio:" var="aspRatio" data-type="text" default-value= "0.7" size="1"/>
<textfield label="Legend size:" var="legendScale" data-type="text" default-value= "1" size="1"/>
legendPosition = c(<combobox items="bottomright,topleft,center" selected-item="bottomright" label="Position of legend:"/>)
</hbox>
</group>

<![CDATA[

#2.0 R code
#2.1.1 load libaries
library(pROC)

#2.1.2 Define the data
#Define the layout
colVector <- c("black", "orange", "blue", "green", "red", "yellow", "pink", "brown", "magenta", "gold", "lightgreen", "lightblue", "lightgrey", "darkgrey", "darkgreen", "darkblue")
#if (useFlowVar) params <- flowVariable

#2.2.1 manage RGG to R: define as numbers
aspRatio <-as.numeric(aspRatio)
legendScale <-as.numeric(legendScale)

#2.2.2 manage RGG to R: set scales to default and check scales
if (is.na(titleLabel)) titleLabel <- NULL
if (is.na(xAxisLabel)) xAxisLabel <- NULL
if (is.na(yAxisLabel)) yAxisLabel <- NULL
if (is.na(aspRatio)) aspRatio <- 1
if (is.na(legendScale)) legendScale <- 1
errorMessage <- NULL
if ((is.null(parameter)) && (is.null(errorMessage))) errorMessage <- "Select at least one parameter"
#if treatment column is not present/selected used first class of selected column as control and all the others as cases
if ((category != "treatment") && (is.null(errorMessage))) {
	if (length(unique(kIn[,category])) < 2) {
		errorMessage <- "Please rename the category column to 'treatment'"
		} else {
		controlVar <- unique(kIn[,category])[1]
		caseVar <- unique(kIn[,category])[2:length(unique(kIn[,category]))]
		}
	}
if ((is.null(caseVar)) && (is.null(errorMessage))) errorMessage <- "Select at least one positive control"
if (!(controlVar %in% kIn[,category]) && (is.null(errorMessage))) errorMessage <- paste("Didnt find negative control value in column ", category, sep="")

#2.3 calculate
if ((useJoinParameterToTitle) && (length(parameter) == 1)) titleLabel <- paste(titleLabel,": (", parameter,")", sep="")
if (useJoinNegativeControlToXAxis) xAxisLabel <- paste(xAxisLabel,"(", controlVar,")", sep="")

#2.4.1 layout plot
legendTitle <- NULL
controlCaseResorted <- NULL

#2.4.2 plot data
if (!is.null(errorMessage)){
	plot(0,0,main=errorMessage)
	} else {
	#itereate over j-parameters and i-cases
	for (j in 1:length(parameter)) {
		for (i in 1:length(caseVar)) {
			if (plotMethod=="manual") {
				#set up plot for first iteration, take first color
				if ((i == 1) && (j == 1)) {
					plot(0.5,0.5, type = "p", col = "white", xlim <- c(0,1), ylim <- c(0,1), main=titleLabel, xlab=xAxisLabel, ylab=yAxisLabel, asp=aspRatio)
					legendVector <- NULL
					}
				controlCaseResorted <- NULL
				#define the ROC data: contols and one case -> remove NAs -> sort
				data <- na.omit(rbind(subset(kIn,kIn[,category] == controlVar, select = c(parameter[j], category)), subset(kIn,kIn[,category] == caseVar[i], select = c(parameter[j], category))))
				if (median(data[which(data[,category] == controlVar),parameter[j]], na.rm = TRUE) > median(data[which(data[,category] == caseVar[i]),parameter[j]], na.rm = TRUE) || (controlCaseDirection != "automatic")) {
					data <- data[order(data[,parameter[j]], decreasing = FALSE),]
					} else {
					#data is sorted the other way, because control bigger values bigger that case values. Then set * to legend curve and add title to lagend
					data <- data[order(data[,parameter[j]], decreasing = TRUE),]
					controlCaseResorted <- "*"
					legendTitle <- "* = control & case inverted"
					}
				#define length of steps to walk in x and y per data point
				xLength <- 1/(length(which(data[,category] == controlVar))-1)
				yLength <- 1/(length(which(data[,category] == caseVar[i]))-1)
				#initalize first point, then draw steps
				previousPoint <- c(0,0)
				for (d in 1:length(data[,1])){
					if (data[d,category] == controlVar){
						currentPoint <- c(previousPoint[1]+xLength,previousPoint[2])
						} else {
						currentPoint <- c(previousPoint[1],previousPoint[2]+yLength)
						}
					lines(c(previousPoint[1],currentPoint[1]),c(previousPoint[2],currentPoint[2]), type = "l", col = colVector[(j-1)*length(caseVar)+i])
					previousPoint <-currentPoint
					}
				} else {
				#if plotMethod == "auto"
				#calculate the ROC object
				currentRoc <- roc(controls = kIn[which(kIn[,category] == controlVar),parameter[j]], cases = kIn[which(kIn[,category] == caseVar[i]),parameter[j]], percent=FALSE)
				if ((i == 1) && (j == 1)) {
					#set up plot for first iteration, take first color
					plot.roc(currentRoc, col=colVector[1], legacy.axes=TRUE, main=titleLabel, xlab=xAxisLabel, ylab=yAxisLabel, asp=aspRatio)
					#define a variable for legend vector
					legendVector <- NULL
					} else {
					#add lines to plot, colors: e.g. 0*2+1, 0*2+2, 1*2+1, 1*2+2, 2*2+1, ...
					lines.roc(currentRoc, col=colVector[(j-1)*length(caseVar)+i])
					}
				}
			#make legend vector: only if ONE parameter use the "cases", else use combination "parameter - cases" as legend
			if (length(parameter) == 1){
				legendVector[i] <- paste(caseVar[i], controlCaseResorted,sep="")
				} else {
				legendVector[(j-1)*length(caseVar)+i] <- paste(parameter[j], " - ", caseVar[i], controlCaseResorted, sep="")
				}
			}
		}
	legend(legendPosition, legendVector, lty=1, col=colVector[1:length(legendVector)], cex=legendScale, title=legendTitle)
	}
]]>
</rgg>

########################################################################################
# name: Correlogram
# author: Holger Brandl
# category: relations
# preview: correlogram.png

Produces a graphical display of a correlation matrix, called a correlogram. The cells of the matrix can be shaded or colored to show the correlation value. 

Source: http://addictedtor.free.fr/graphiques/RGraphGallery.php?graph=148

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="3"/>


<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define which parameters you would like to visualize
params =  which(names(kIn) %in% c(<panellistbox label="Parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>));

# a)  (optional) title
title=<textfield label="Title" var="plotTitle" data-type="text" default-value="" size="10"
           enabled="dfdf" span="full"/>;
</group>


# 2. r-code

<![CDATA[

subScreen = kIn[, params];

require( corrgram );


corrgram(kIn[,params], order=TRUE, row1attop=FALSE,
         main=plotTitle,
         upper.panel=panel.ellipse,
		 lower.panel=panel.pts,
		 diag.panel=panel.minmax)

]]>

</rgg>
########################################################################################
# name: Correlogram (colored ellipses)
# author: Holger Brandl
# category: relations
# preview: ellipse-correlogram.png

Produces a graphical display of a correlation matrix, called a correlogram. The cells of the matrix can be shaded or colored to show the correlation value.

Source: http://addictedtor.free.fr/graphiques/RGraphGallery.php?graph=149

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="3"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define which parameters you would like to visualize
params =  which(names(kIn) %in% c(<panellistbox label="Parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>));

</group>


# 2. r-code

<![CDATA[

library(package="ellipse")

subR <- kIn[,params];

correl <- cor(subR, use="complete.obs")
ord <- order(correl[1,])
xc <- correl[ord, ord]
colors <- c("#A50F15","#DE2D26","#FB6A4A","#FCAE91","#FEE5D9","white","#EFF3FF","#BDD7E7","#6BAED6","#3182BD","#08519C")
plotcorr(xc, col=colors[5*xc + 6])

]]>

</rgg>
########################################################################################
# name: Correlogram with p-values
# author: Holger Brandl
# category: relations
# preview: correlation-scattermatrix+pvalues.png

Visualization of a Correlation Matrix. On top the (absolute) value of the correlation plus the result of the cor.test as stars. On botttom, the bivariate scatterplots, with a fitted line.

Source: http://addictedtor.free.fr/graphiques/RGraphGallery.php?graph=137

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="3"/>


<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define which parameters you would like to visualize
params =  which(names(kIn) %in% c(<panellistbox label="Parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>));

</group>


# 2. r-code

<![CDATA[
subScreen = kIn[, params];

panel.cor <- function(x, y, digits=2, prefix="", cex.cor)
{
    usr <- par("usr"); on.exit(par(usr))
    par(usr = c(0, 1, 0, 1))
    r <- cor(x, y, use="complete.obs")
    absCor <- abs(r);
    txt <- format(c(r, 0.123456789), digits=digits)[1]
    txt <- paste(prefix, txt, sep="")
    if(missing(cex.cor)) cex <- 0.8/strwidth(txt)

    test <- cor.test(x,y, na.action = na.exclude)
    # borrowed from printCoefmat
    Signif <- symnum(test$p.value, corr = FALSE, na = FALSE,
                  cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
                  symbols = c("***", "**", "*", ".", " "))

    text(0.5, 0.5, txt, cex = cex * absCor)
    text(.8, .8, Signif, cex=cex, col=2)
}
pairs(subScreen, lower.panel=panel.smooth, upper.panel=panel.cor)


]]>

</rgg>
########################################################################################
# name: density-scatter-matrix
# author: Felix Meyenhofer
# category: relations
# preview: density-scatter-matrix.png

Displays a scatter matrix where the color code reflect the density of points.
The densities are log2-scaled.

Parameter:
Grouping column: cathegorical column that associates the observation to a group.
Feature space: a set of variables (columns) where each feature is plotted in a
               scatter plot against all other features.

######

<rgg>

    <!--1. Title and short description -->

    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
    <gaprow height="1"/>
    <separator label="Options" span="full"/>
    <gaprow height="2"/>


    <!-- 2. Configuration -->

    <group>
        # a) Define the feature space
        numericColumns= c(<panellistbox items="$$$NUM_ATTRIBUTES$$$" label="Feature space" aligment="center" span="full"/>);

        # b) the title of the plot
        <textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value="my plot" size="10" aligment="center" span="full"/>
    </group>


    <!-- 2. Code -->

    <![CDATA[
        library(IDPmisc)


        labels <- names(kIn);
        numericColumns <- which(labels %in% numericColumns);
        labels <- labels[numericColumns];

        M <- kIn[,numericColumns];

        graph <- ipairs(M, ztransf = function(x){x[x<1] <- 1; log2(x)}, lab.diag=labels, main=plotTitle)

        print(graph)
    ]]>

</rgg>
########################################################################################
# name: Grouped scatter-matrix
# author: Felix Meyenhofer, modified by Martin Stoeter
# category: relations
# preview: grouped-scatter-matrix.png

Diplays a scatter matrix where all the groups found in the grouping column get their own color.

Parameter:
1) Grouping column: select a categorical column that contains the factors/groups.
2) Feature space: select numerical variables where each variable is plotted in a scatter plot against all other variables.
3) Title: enter a title
4) Layout:
- Alpha value: define the alpha value of the points. The more data the lower you can set this value.
- Select color palette for plot.
- Select if background should be white.
- If color palette "manual" is used then select colors for each group (in alphabetical order of groups) 
      - see here for colors: http://research.stowers-institute.org/efg/R/Color/Chart/ColorChart.pdf
######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<separator label="Options" span="full"/>
<gaprow height="2"/>

<!-- 2. Configuration-->

#1.0 Parameter selection

<group>

# a) Define the grouping column
groupColumn= <combobox items="$$$STR_ATTRIBUTES$$$" label="Grouping column"/>;

# b) Define the feature space
numericColumns= c(<panellistbox items="$$$NUM_ATTRIBUTES$$$" label="Feature space" aligment="center" span="full"/>);

# c) the title of the plot
<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value="my plot" size="10" aligment="center" span="full"/>

<hbox>
# d) Alpha value
<textfield label="Alpha value" var="alphaValue" data-type="number" default-value="0.75" aligment="center"/>

# e) Define the colour of fill or line
colorPalette = <combobox items="standard,Spectral,clarity" label="Color palette"/>;

# f) Define the colour of fill or line
setBkgWhite = <checkbox label="No background"/>;
</hbox>

# g) Select manual colors for groups (number of colors and groups must be the same!)
setColorPaletteManual = <checkbox label="Use manual color palette"/>;
colorPaletteVector = c(<panellistbox label="Colors for manual palette" items="black,blue,lightblue,darkblue,brown,cyan,darkcyan,lightcyan,gold,green,lightgreen,darkgreen,grey,lightgrey,darkgrey,khaki,magenta,darkmagenta,orange,pink,red,darkred,yellow,yellowgreen" span="full"/>)

</group>

<![CDATA[

#2.0 R code

#2.1.1 load libaries
library(reshape)
library(ggplot2)

#2.1.2 Define the data
#see 2.3 calculate

#2.2.1 manage RGG to R: define as numbers
params <- numericColumns
alphaValue = as.numeric(alphaValue)

#2.2.2 manage RGG to R: set scales to default and check scales
if (setColorPaletteManual) {
	colorPalette <- "manual"
	if(length(colorPaletteVector) < length(unique(kIn[,groupColumn]))) colorPaletteVector[(length(colorPaletteVector)+1):length(unique(kIn[,groupColumn]))] <- "black"
	if(length(colorPaletteVector) > length(unique(kIn[,groupColumn]))) colorPaletteVector <- colorPaletteVector[1:length(unique(kIn[,groupColumn]))]
	}

#2.3 calculate
completeDF <- kIn[complete.cases(kIn[,params]),]

dat <- data.frame(t(combn(params, 2)))
names(dat) <- c("X","Y")

clevels <- unique(c(as.character(dat$X),as.character(dat$Y)))

dat$X <- factor(dat$X, levels = clevels)
dat$Y <- factor(dat$Y, levels = clevels)

dat <- ddply(dat, c('X', 'Y'), function(d) {
       xd <- as.character(d$X[1])
       yd <- as.character(d$Y[1])
       data.frame(x = completeDF[,xd], y = completeDF[,yd], group = completeDF[,groupColumn])
       })

#2.4.1 layout plot
theme <- theme(panel.background = theme_rect(fill = "gray95"),
                      panel.grid.minor = theme_blank(),
                      legend.background = theme_rect(fill = "gray85"),
                      axis.title.x = element_text(colour = NA),
                      axis.title.y = element_text(colour = NA))

#2.4.2 plot data
p <- ggplot(dat, aes(x = x, y = y, colour = group)) + geom_point(alpha=alphaValue) + facet_grid(Y ~ X, scales='free') + theme

switch(which(colorPalette == c('standard','clarity','Spectral','manual')), {
	}, { #standard
	if(length(unique(dat[,"group"])) < 9) p <- p + scale_colour_brewer("clarity")}, {
	if(length(unique(dat[,"group"])) < 11) p <- p + scale_colour_brewer(pal = "Spectral")}, {
	p <- p + scale_colour_manual(values = colorPaletteVector)}
	)

#plot title
p <- p + ggtitle(plotTitle)

#set background on/off
if (setBkgWhite) p <- p + theme_bw()

print(p)

]]>

</rgg>
########################################################################################
# name: Group means parallel-plot
# author: Holger Brandl, Antje Niederlein, Martin Stoeter              
# category: screening/profiles
# preview: group_means_parallel_plot.png

A parallel plot (aka profile plot) of means of different groups with errors bars. If robust statistics is checked the median and mad will be used instead of mean and sd. The y-axis limits are calculated from the input data, optional you can set the limits manually or calculate them from the plot data using min and max plotted valued (auto scale). Horizontal lines can be plotted optionally. 

Inputs
1) a grouping variable
2) a selection of assay parameters
3) option: use robust statistics
4) option: set the y-axis limits or allow auto scale (on min and max plot value) on y-axis
5) option: draw horizontal lines at two y values
6) option: label of y-axis
7) option: add title
######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

# 1. Parameter selection

<group>

# a) define your grouping variable
catVar = <combobox items="$$$STR_ATTRIBUTES$$$" label="Categorical variable of interest"/>

# b) define your parameters of interest
parameters =  c(<panellistbox label="Assay parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

# c) use robust statistics?
<checkbox label="robust statistics" var="robust" selected="false"/>

# d) set y axis scale
<hbox>
<vector label="y-axis scale (min, max):" var="yAxisScale" size="2" vector-type="character"/>
<checkbox label="Auto scale y-axis (min to max)" var="yAxisAutoScale" selected="false"/>
</hbox>

# e) add horizontal lines
<vector label="Add horizontal lines at" var="hLines" size="2" vector-type="character"/>

# f) define y-axis label
<textfield label="y-axis label" var="yLabel" data-type="text" default-value= "" size="10" span="full"/>

# g) define a title for the plot
<textfield label="Title" var="mainTitle" data-type="text" default-value= "" size="10" span="full"/>

</group>

<![CDATA[

#2. r-code

#2.1 load libaries
library(ggplot2)
library(reshape)

#2.2.1 manage RGG to R: define as numbers
hLines <- as.numeric(hLines)
yAxisScale <- as.numeric(yAxisScale)

#2.2.2 manage RGG to R: set scales to default and check scales
if (is.na(yAxisScale[1]) | is.na(yAxisScale[2])) 	yAxisScale <- NULL
if (is.na(yLabel))	yLabel <- NULL
if (is.na(mainTitle))	mainTitle <- NULL

#2.3 calculate
#define functions/methods to calculate central values and error bars
if (robust == FALSE) {
	#none robust statistics
	parameterLabel = "Parameters (aggregation: mean & sd)"
	centralValue <- function(x){
        	x.mean <- mean(x, na.rm = TRUE)
        	return(x.mean)
		}
	errorUpper <- function(x){
        	x.mean <- mean(x, na.rm = TRUE)
        	x.sd <- sd(x, na.rm = TRUE)
        	return(x.mean + x.sd)
		}
	errorLower <- function(x){
        	x.mean <- mean(x, na.rm = TRUE)
        	x.sd <- sd(x, na.rm = TRUE)
        	return(x.mean - x.sd)
		}
	} else {
	#robust statistics
	parameterLabel = "Parameters (aggregation: median & mad)"
	centralValue <- function(x){
        	x.median <- median(x, na.rm = TRUE)
        	return(x.median)
		}
	errorUpper <- function(x){
        	x.median <- median(x, na.rm = TRUE)
        	x.mad <- mad(x, na.rm = TRUE)
        	return(x.median + x.mad)
		}
	errorLower <- function(x){
        	x.median <- median(x, na.rm = TRUE)
        	x.mad <- mad(x, na.rm = TRUE)
        	return(x.median - x.mad)
		}
	}

classesOfInterest <- levels(factor(kIn[,catVar]))

# create a subset ony containing entries with classes of interest and parameters of interest
subData <- subset(kIn, get(catVar) %in% classesOfInterest)
subData <- subData[, c(catVar,parameters)]
# set rowID as extra column for reshaping
#subData$id <- rownames(subData)

#calculate auto y-axis scale
if (yAxisAutoScale) {
	minMax <- list()
	for (i in 1:length(classesOfInterest)) {
		minMax[[i]] <- c(min(apply(subset(subData, subData[,catVar] == classesOfInterest[i], select = parameters), 2, errorLower)), max(apply(subset(subData, subData[,catVar] == classesOfInterest[i], select = parameters), 2, errorUpper)))
		}
	minMax <- do.call("rbind", minMax)
	yAxisScale <- c(min(minMax), max(minMax))
	#increase the plot area
	yAxisScale <- c(yAxisScale[1] - range(yAxisScale[1], yAxisScale[2]) / 20, yAxisScale[2] + range(yAxisScale[1], yAxisScale[2]) / 20)
	}

# reshape data for ggplot
plotData <- melt(subData, id = catVar)

#2.4.1 layout plot
#e.g. par(oma=margins)

#2.4.2 plot data
p <- ggplot(plotData, aes(x = variable, y = value, colour = get(catVar), group = get(catVar)))
p <- p + coord_cartesian(ylim = yAxisScale)
p <- p + stat_summary(fun.y = centralValue, geom = "line") 
p <- p + stat_summary(fun.ymax = errorUpper, fun.ymin = errorLower, geom = "errorbar", width=0.25)
p <- p + labs(x = parameterLabel, y = yLabel, colour = catVar)
p <- p + theme(axis.text.x = element_text(hjust = 1, angle = 90))
#colorPaletteVector <- c("red", "blue", "darkgreen", "orange")
#p <- p + scale_colour_manual(values = colorPaletteVector)
if (!is.na(hLines[1])) p <- p + geom_hline(yintercept = hLines[1])
if (!is.na(hLines[2])) p <- p + geom_hline(yintercept = hLines[2])
p <- p + ggtitle(mainTitle) 
print(p)

]]>

</rgg>
########################################################################################
# name: Group means parallel-plot with layout options
# author: Holger Brandl, Antje Niederlein, Martin Stoeter              
# category: screening/profiles
# preview: group_means_parallel_plot.png

A parallel plot (aka profile plot) of means of different groups with or without errors bars. 
If robust statistics is checked the median and mad will be used instead of mean and sd. 
The y-axis limits are calculated from the input data, optional you can set the limits manually or calculate them from the plot data using min and max plotted valued (auto scale).
Horizontal lines can be plotted optionally. 

Inputs
1) a grouping variable
2) a selection of assay parameters
3) option: use robust statistics

Layout Options: 
 - check to use robust statistics and to plot error bars 
 - select background/theme and set general font size in plot (default = 14)
 - set size and alpha value (transparency) of lines and error bars (default = [0.5,0.1] and [0.5,0.5])
 - give plot title and title factor (default = 1.2)
 - x-axis test: angle, text size factor for x-/y-axis (default = 0.8) 
 - y-axis title, axis title size factor (default = 1.0)
 - adjust y-axis scale (enter min + max)
 - give legend title, adjust position (fixed position outside diagram or free(range:0-1): [0.1,0.9] = top-left) and legend title/text size factor(default = 0.8)   
######

<rgg>

<!--1. Title and short description -->
<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>

<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

# 1. Parameter selection

<group>

# a) define your grouping variable
catVar = <combobox items="$$$STR_ATTRIBUTES$$$" label="Categorical variable of interest"/>

# b) define your parameters of interest
parameters =  c(<panellistbox label="Assay parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

# c) use robust statistics?
<hbox>
<checkbox label="robust statistics" var="robust" selected="false"/>
<checkbox label="plot error bars" var="plotErrorBars" selected="true"/>
<combobox var="colorPalette" items="ggplot default,Set1,Set2,Set3,Accent,Dark2,Paired,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd,KNIME colors" label="Color palette:"/>
</hbox>

#diagram options
<gaprow height="1"/>
<separator label="Layout Options General Plot" span="full"/>
<hbox>
pointLineSize = as.numeric(c(<vector label="Size [lines/error]:" size="2" default-value="0.5,0.1"/>))
alphaValue = as.numeric(c(<vector label="Alpha [lines/error]:" size="2" default-value="0.5,0.5"/>))
</hbox>

<hbox>
hLines = as.numeric(c(<vector label="Add horizontal lines at" size="2" vector-type="character"/>))
</hbox>

<hbox>
plotTheme = <combobox items="grey,black-white" label="background/theme:"/>
plotTextSize = as.numeric(c(<vector label="font size [plot]:" size="1" default-value="14"/>))
</hbox>

<separator label="Layout Options Title" span="full"/>
<hbox>
<textfield label="plot title:" var="plotTitle" data-type="text" default-value= "" size="5"/>
plotTitleSize = as.numeric(c(<vector label="text size [title]:" size="1" default-value="1.2"/>))
</hbox>

<separator label="Layout Options Axes" span="full"/>	
<hbox>
xAngle = as.numeric(c(<combobox label = "angle of x-axis labels:" items = "90,45,0"/>))
axisTextSizeFactor = as.numeric(c(<vector label="axis text size [x/y]:" size="2" default-value="0.8,0.8"/>))
</hbox>
	
<hbox>
<textfield label="y-axis title:" var="yAxisLabel" data-type="text" default-value= "" size="3"/>
axisTitleSizeFactor = as.numeric(c(<vector label="axis title size [x/y]:" size="2" default-value="1.0,1.0"/>))
</hbox>

<hbox>
yAxisScale = as.numeric(c(<vector label="y-axis scale [min,max]:" size="2" default-value=","/>))
<checkbox label="Auto scale y-axis (min to max)" var="yAxisAutoScale" selected="false"/>
</hbox>

<separator label="Layout Options Legend" span="full"/>
<hbox>
legendPosition = <combobox label = "legend position:" items = "right,top,bottom,left,none"/>
useLegendCoordinate = <checkbox label="use legend coordinate" selected="f"/>
legendCoordinate = as.numeric(c(<vector label="coordinate [x,y]:" size="2" default-value="0.0,1.0"/>))
</hbox>

<hbox>
legendTitle = <textfield label="legend title:" data-type="text" default-value="" size="3"/>
legendTextSizeFactor = as.numeric(c(<vector label="text size [title,text]:" size="2" default-value="0.8,0.8"/>))
rotateLegend = <checkbox label="rotate 90deg." selected="f"/>
</hbox>

</group>

<![CDATA[

#2. r-code

#2.1 load libaries
library(ggplot2)
library(reshape)
library(RColorBrewer)

#2.2.1 manage RGG to R: define as numbers

#2.2.2 manage RGG to R: set scales to default and check scales
if (is.na(pointLineSize[1]) | (pointLineSize[1] < 0) | (pointLineSize[1] > 40)) pointLineSize[1] <- 0.5
if (is.na(pointLineSize[2]) | (pointLineSize[2] < 0) | (pointLineSize[2] > 10)) pointLineSize[2] <- 0.1
if (is.na(alphaValue[1]) | (alphaValue[1] < 0) | (alphaValue[1] > 1)) pointLineSize[1] <- 0.5
if (is.na(alphaValue[2]) | (alphaValue[2] < 0) | (alphaValue[2] > 1)) pointLineSize[2] <- 0.5
if (is.na(plotTitle))	plotTitle <- NULL		#default if no title is given
if (is.na(plotTextSize[1]) | (plotTextSize[1] < 0) | (plotTextSize[1] > 40)) plotTextSize[1] <- 14
if (is.na(plotTitleSize[1]) | (plotTitleSize[1] < 0) | (plotTitleSize[1] > 5)) plotTitleSize[1] <- 1.2
if (is.na(yAxisLabel))	yAxisLabel <- NULL
if (is.na(axisTextSizeFactor[1]) | (axisTextSizeFactor[1] < 0) | (axisTextSizeFactor[1] > 5)) axisTextSizeFactor[1] <- 0.8
if (is.na(axisTextSizeFactor[2]) | (axisTextSizeFactor[2] < 0) | (axisTextSizeFactor[2] > 5)) axisTextSizeFactor[2] <- 0.8
if (is.na(axisTitleSizeFactor[1]) | (axisTitleSizeFactor[1] < 0) | (axisTitleSizeFactor[1] > 5)) axisTitleSizeFactor[1] <- 1
if (is.na(axisTitleSizeFactor[2]) | (axisTitleSizeFactor[2] < 0) | (axisTitleSizeFactor[2] > 5)) axisTitleSizeFactor[2] <- 1
if (is.na(yAxisScale[1]) | is.na(yAxisScale[2]))	yAxisScale <- NULL
if (is.na(legendTitle)) legendTitle <- catVar	#default if no title is given
if (is.na(legendCoordinate[1]) | is.na(legendCoordinate[2]) | (legendCoordinate[1] < 0) | (legendCoordinate[1] > 1) | (legendCoordinate[2] < 0) | (legendCoordinate[2] > 1)) useLegendCoordinate <- FALSE
if (is.na(legendTextSizeFactor[1]) | (legendTextSizeFactor[1] < 0) | (legendTextSizeFactor[1] > 5)) legendTextSizeFactor[1] <- 0.8
if (is.na(legendTextSizeFactor[2]) | (legendTextSizeFactor[2] < 0) | (legendTextSizeFactor[2] > 5)) legendTextSizeFactor[2] <- 0.8
if (xAngle == 0 ) xAxisAjust <- c(0.5,1.0) #xAxisAjust = c(hjust,vjust)
if (xAngle == 45) xAxisAjust <- c(1.0,1.0)	
if (xAngle == 90) xAxisAjust <- c(1.0,0.5)	

useKNIMEColors <- FALSE
if(colorPalette == "KNIME colors") useKNIMEColors <- FALSE #set this to TRUE once KNIME colors is tested

# for brewer palettes check possible values
colourCol <- catVar
nFactors <- length(colourCol)
brewerTable <- do.call("cbind", brewer.pal.info)
rownames(brewerTable) <- rownames(brewer.pal.info)
if (colorPalette %in% rownames(brewerTable) && !useKNIMEColors) {
	if (brewerTable[which(rownames(brewerTable) == colorPalette),"maxcolors"] < nFactors) colorPalette <- "ggplot default"
} else {
	warningMessage <- paste("Color set '", colorPalette, "' cannot be used for ", nFactors, " different values. Color palette is reset to ggplot default", sep = "")
	warning(warningMessage)
	colorPalette <- "ggplot default"
}

if (useKNIMEColors) {
	# check if color model is joined to data table
	if (!length(which(c("R","G","B","A") %in% names(kIn))) == 4) {
		colorPalette <- "standard"
		warning("KNIME colors not available in input table, standard palette is used instead")
		# if yes, generate color table from KNIME colors
	} else { 
		# check whether colors belong to grouping factor  
		colorTable <- lapply(factors, FUN = function(x) {
			subdata <- subset(kIn, kIn[, factorName] == x, select = c(R, G, B, A, RGBA), drop = FALSE)
			if(length(unique(subdata$RGBA)) > 1) stop("KNIME color model does not fit to selected factor column")
			subdata[1,]
			})
		# create color vector
		names(colorTable) <- factors
		colorTable <- do.call("rbind", colorTable)
		factorColors <- rgb(colorTable$R, colorTable$G, colorTable$B, colorTable$A, max =  255) 
		names(factorColors) <- factors
	}
}

#2.3 calculate
#define functions/methods to calculate central values and error bars
if (robust == FALSE) {
	#none robust statistics
	parameterLabel = "Parameters (aggregation: mean & sd)"
	centralValue <- function(x){
        	x.mean <- mean(x, na.rm = TRUE)
        	return(x.mean)
		}
	errorUpper <- function(x){
        	x.mean <- mean(x, na.rm = TRUE)
        	x.sd <- sd(x, na.rm = TRUE)
        	return(x.mean + x.sd)
		}
	errorLower <- function(x){
        	x.mean <- mean(x, na.rm = TRUE)
        	x.sd <- sd(x, na.rm = TRUE)
        	return(x.mean - x.sd)
		}
	} else {
	#robust statistics
	parameterLabel = "Parameters (aggregation: median & mad)"
	centralValue <- function(x){
        	x.median <- median(x, na.rm = TRUE)
        	return(x.median)
		}
	errorUpper <- function(x){
        	x.median <- median(x, na.rm = TRUE)
        	x.mad <- mad(x, na.rm = TRUE)
        	return(x.median + x.mad)
		}
	errorLower <- function(x){
        	x.median <- median(x, na.rm = TRUE)
        	x.mad <- mad(x, na.rm = TRUE)
        	return(x.median - x.mad)
		}
	}

classesOfInterest <- levels(factor(kIn[,catVar]))

# create a subset ony containing entries with classes of interest and parameters of interest
subData <- subset(kIn, get(catVar) %in% classesOfInterest)
subData <- subData[, c(catVar,parameters)]
# set rowID as extra column for reshaping
#subData$id <- rownames(subData)

#calculate auto y-axis scale
if (yAxisAutoScale) {
	minMax <- list()
	for (i in 1:length(classesOfInterest)) {
		minMax[[i]] <- c(min(apply(subset(subData, subData[,catVar] == classesOfInterest[i], select = parameters), 2, errorLower)), max(apply(subset(subData, subData[,catVar] == classesOfInterest[i], select = parameters), 2, errorUpper)))
		}
	minMax <- do.call("rbind", minMax)
	yAxisScale <- c(min(minMax), max(minMax))
	#increase the plot area
	yAxisScale <- c(yAxisScale[1] - range(yAxisScale[1], yAxisScale[2]) / 20, yAxisScale[2] + range(yAxisScale[1], yAxisScale[2]) / 20)
	}

# reshape data for ggplot
plotData <- melt(subData, id = catVar)

#2.4.1 plot data
p <- ggplot(plotData, aes(x = variable, y = value, colour = get(catVar), group = get(catVar)))

#2.4.2 layout plot
#general
if(plotTheme == "grey"){
	p <- p + theme_grey(base_size=plotTextSize[1])
	} else {
	p <- p + theme_bw(base_size=plotTextSize[1])
	}
p <- p + coord_cartesian(ylim = yAxisScale)

#error bars and horizontal lines
p <- p + stat_summary(fun.y = centralValue, geom = "line", size = pointLineSize[1], alpha = alphaValue[1]) 
if(plotErrorBars == TRUE) p <- p + stat_summary(fun.ymax = errorUpper, fun.ymin = errorLower, geom = "errorbar", width = pointLineSize[2], alpha = alphaValue[2])
if (!is.na(hLines[1])) p <- p + geom_hline(yintercept = hLines[1])
if (!is.na(hLines[2])) p <- p + geom_hline(yintercept = hLines[2])

#title options
p <- p + ggtitle(plotTitle) 
p <- p + theme(plot.title = element_text(size = plotTextSize[1] * plotTitleSize[1]))

#axis label options
#p <- p + scale_x_discrete(name = xFactorCol)
p <- p + labs(x = parameterLabel, y = yAxisLabel, colour = catVar)
p <- p + theme(axis.title.x = element_text(size = plotTextSize[1] * axisTitleSizeFactor[1]), axis.title.y = element_text(size = plotTextSize[1] * axisTitleSizeFactor[2]))
p <- p + theme(axis.text.x = element_text(angle = xAngle, hjust = xAxisAjust[1], vjust = xAxisAjust[2], size = plotTextSize[1] * axisTextSizeFactor[1]), axis.text.y = element_text(size = plotTextSize[1] * axisTextSizeFactor[2]))
p <- p + scale_y_continuous(limits = yAxisScale, name = yAxisLabel) #use e.g. limits = c(0,100)

#legend
if(rotateLegend) {
p <- p + scale_color_discrete(name = legendTitle, guide = guide_legend(direction = "horizontal", title.position = "top", label.position="bottom", label.hjust = 0.5, label.vjust = 0.5, label.theme = element_text(angle = 90)))
	} else {
	p <- p + scale_color_discrete(name = legendTitle)
	}
p <- p + theme(legend.title = element_text(size = plotTextSize[1] * legendTextSizeFactor[1], face = "bold"), legend.text = element_text(size = plotTextSize[1] * legendTextSizeFactor[2]))
if (useLegendCoordinate) {
	p <- p + theme(legend.position = legendCoordinate, legend.background = element_rect(fill = "transparent",colour = NA))
	} else {
	p <- p + theme(legend.position = legendPosition) 
	}
	
# color settings	
colorPaletteVector <- c("red", "blue", "darkgreen", "orange")
#p <- p + scale_colour_manual(values = colorPaletteVector)
if(useKNIMEColors) {
	p <- p + scale_color_manual(name = catVar, labels = factors, values = factorColors)
	p <- p + scale_fill_manual(name = catVar, labels = factors, values = factorColors)
	} else {
	if(colorPalette == "ggplot default") {
		p <- p + scale_color_discrete(name = catVar)
		p <- p + scale_fill_discrete(name = catVar)
		} else {
		p <- p + scale_color_brewer(name = catVar, palette = colorPalette) 
		p <- p + scale_fill_brewer(name = catVar, palette = colorPalette)
		}
	}
print(p)

]]>

</rgg>
########################################################################################
# name: Parallel plot grid by factor
# author: Holger Brandl, Antje Niederlein, Martin Stoeter
# category: screening/profiles
# preview: parallel-plot-grid-by-factors.png

A grid of parallel plots where each plot displays a parameter profile for all data points belonging to the same group. Additionally the mean of the data set is shown including error-bars. If robust statistics is checked the median and mad will be used instead of mean and sd.

Inputs:
1) a grouping variable
2) a selection of assay parameters
3) option: use robust statistics
4) option: scale of y-axis (default, use fixed values, auto-scale (plot area = +/-5% of min/max))
5) option: set number of columns in grip plot (default, set automatic)
6) option: draw horizontal lines at two y values
7) option: label of y-axis
8) option: add title
######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

# 1.0 Parameter selection

<group>

# a) define your grouping variable
<combobox var = "catVar" label = "Factors used as grid" items = "$$$STR_ATTRIBUTES$$$"/>

# b) define your parameters of interest
parameters =  c(<panellistbox label="Assay parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

# c) use robust statistics?
<checkbox label="robust statistics" var="robust" selected="false"/>

# d) set y axis scale
<hbox>
<vector label="y-axis scale (min, max):" var="yAxisScale" size="2" vector-type="character"/>
<checkbox label="Auto scale y-axis (min to max)" var="yAxisAutoScale" selected="false"/>
</hbox>

# d2) set grid colums
<vector label="columns in grid:" var="numberOfGridColumns" size="1" vector-type="character"/>

# e) add horizontal lines
<vector label="Add horizontal lines at" var="hLines" size="2" vector-type="character"/>

# f) define y-axis label
<textfield label="y-axis label" var="yLabel" data-type="text" default-value= "" size="10" />

# g) define a title for the plot
<textfield label="Title" var="mainTitle" data-type="text" default-value= "" size="10" />

</group>

<![CDATA[

#2. r-code

#2.1 load libaries
library(ggplot2)
library(reshape)
library(grid)

#2.2.1 manage RGG to R: define as numbers
hLines <- as.numeric(hLines)
yAxisScale <- as.numeric(yAxisScale)
numberOfGridColumns <- as.numeric(numberOfGridColumns)

#2.2.2 manage RGG to R: set scales to default and check scales
if (is.na(yAxisScale[1]) | is.na(yAxisScale[2])) 	yAxisScale <- NULL
if (is.na(numberOfGridColumns[1])) numberOfGridColumns <- NULL
if (is.na(yLabel))	yLabel <- NULL
if (is.na(mainTitle))	mainTitle <- NULL

#2.3 calculate
#define functions/methods to calculate central values and error bars
if (robust == FALSE) {
	#none robust statistics
	parameterLabel = "Parameters (aggregation in red: mean & sd)"
	centralValue <- function(x){
        	x.mean <- mean(x, na.rm = TRUE)
        	return(x.mean)
		}
	errorUpper <- function(x){
        	x.mean <- mean(x, na.rm = TRUE)
        	x.sd <- sd(x, na.rm = TRUE)
        	return(x.mean + x.sd)
		}
	errorLower <- function(x){
        	x.mean <- mean(x, na.rm = TRUE)
        	x.sd <- sd(x, na.rm = TRUE)
        	return(x.mean - x.sd)
		}
	} else {
	#robust statistics
	parameterLabel = "Parameters (aggregation in red: median & mad)"
	centralValue <- function(x){
        	x.median <- median(x, na.rm = TRUE)
        	return(x.median)
		}
	errorUpper <- function(x){
        	x.median <- median(x, na.rm = TRUE)
        	x.mad <- mad(x, na.rm = TRUE)
        	return(x.median + x.mad)
		}
	errorLower <- function(x){
        	x.median <- median(x, na.rm = TRUE)
        	x.mad <- mad(x, na.rm = TRUE)
        	return(x.median - x.mad)
		}
	}

classesOfInterest <- levels(factor(kIn[,catVar]))

# create a subset ony containing entries with classes of interest and parameters of interest
subData <- subset(kIn, get(catVar) %in% classesOfInterest)
subData <- subData[, c(catVar,parameters)]
# set rowID as extra column for reshaping
subData$id <- rownames(subData)

#calculate auto y-axis scale
if (yAxisAutoScale) {
	minMax <- list()
	for (i in 1:length(classesOfInterest)) {
		minMax[[i]] <- c(min(apply(subset(subData, subData[,catVar] == classesOfInterest[i], select = parameters), 2, errorLower)), max(apply(subset(subData, subData[,catVar] == classesOfInterest[i], select = parameters), 2, errorUpper)))
		}
	minMax <- do.call("rbind", minMax)
	yAxisScale <- c(min(minMax), max(minMax))
	#increase the plot area
	yAxisScale <- c(yAxisScale[1] - range(yAxisScale[1], yAxisScale[2]) / 20, yAxisScale[2] + range(yAxisScale[1], yAxisScale[2]) / 20)
	}

# reshape data for ggplot
plotData <- melt(subData, id = c(catVar,"id"))
plotData <- plotData[complete.cases(plotData),]
names(plotData)[which(names(plotData) == catVar)] <- "catVar"

#2.4.1 layout plot
#e.g. par(oma=margins)

#2.4.2 plot data
p <- ggplot(plotData, aes(x = variable, y = value, group = catVar)) + geom_line(aes(group = id), colour = "grey") + geom_point(aes(group = id), colour = "grey")
p <- p + coord_cartesian(ylim = yAxisScale)
p <- p + stat_summary(fun.y = centralValue, geom = "line", colour = "red", size = 0.5)
p <- p + stat_summary(fun.ymax = errorUpper, fun.ymin = errorLower, geom = "errorbar", width=0.25, colour = "red")
if (!is.na(hLines[1])) p <- p + geom_hline(yintercept = hLines[1])
if (!is.na(hLines[2])) p <- p + geom_hline(yintercept = hLines[2])
p <- p + labs(x = parameterLabel, y = yLabel)
p <- p + theme(axis.text.x = element_text(hjust = 1, angle = 90))
p <- p + ggtitle(mainTitle) 
p <- p + facet_wrap(~ catVar, ncol = numberOfGridColumns[1])
print(p)

]]>

</rgg>

########################################################################################
# name: QQ-Plot grid
# author: Holger Brandl, Martin Stoeter 
# category: screening/qc
# preview: qq-plot.png

Creates a grid of qq-plots (with respect to normal distribution) which allow to visually determine which parameters follow a normal distribution
- to use a flow variable check box and type in variable name using the format: FLOWVAR(variable name)
- use the R-snippet template "Shapiro-Wilk Normality Test (QQ-Plot)" to get the statistics
######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

#1. Parameter selection
<group>

#Select the parameter of interest
<separator label="Select your parameters for which you would like to see a qq-plots                                                                                                          "/>

selReadouts = c(<panellistbox label="Parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)
<hbox>
<checkbox  label="use flow variable" var="useFlowVarSelReadouts" selected="false"/>
<textfield label="flow variable:" var="flowVariableSelReadouts" data-type="text" default-value= "" size="10" span="full"/>
</hbox>

</group>

<![CDATA[

#2. r-code

#2.0 load libaries
library(grid)

#2.1 manage RGG to R: define as numbers

#2.2 manage RGG to R: set scales to default and check scales
if (useFlowVarSelReadouts) selReadouts <- flowVariableSelReadouts

#3. calculate

#4.1 layout plot
numGridRows = ifelse(length(selReadouts) > 1, 2, 1)
par(mfrow = c(numGridRows, ceiling(length(selReadouts) / numGridRows)))

#4.2 plot data
# iterate over all parameters and create plots for all of them
lapply(selReadouts, FUN = function (param) {
	plotVar = eval(parse(text = paste("kIn$\"", param, "\"", sep = '')))
	#remove NA (shapiro test allows NA but data has to have 3 - 5000 non-missing-values)
	plotVar <- plotVar[which(!is.na(plotVar))]

	#plot
	qqnorm(plotVar, main = param)
	qqline(plotVar)
	
	# if there are more than 5000 data points, run test on a subset
	if(length(plotVar) > 5000) {
		plotVar <- sample(plotVar, 5000)
	}

	# do the test and add the p-value to the plot
	testresult <- shapiro.test(plotVar)

	# use relative positioning of the text plotting (http://www.mail-archive.com/r-help@r-project.org/msg15119.html)
	usr <- par("usr")                      # get user coordinates
	par(usr = c(0, 1, 0, 1))               # new relative user coordinates
	text(0.75, 0.05, format(testresult$p.value, scientific=TRUE, digits=4), cex=1.5, col=2)   # if that's what you want
	par(usr = usr)                         # restore original user coordinates
})

]]>

</rgg>

########################################################################################
# name: Screen Scatter Plot Grid / Trend Plot (color model, treatment column)
# author: Holger Brandl, Martin Stoeter
# category: screening/qc
# preview: screenscattergrid.png
This plot is also known as trend- or sequence-plot ("High-throughput screening in drug discovery, Hueser, 2006, Wiley")

This scatter plot displays all wells of a screen. The bulk data is plotted in grey circles (usually annotated as "library" in categorial column) and all other categories are plotted in different colors and shapes. If colors were assigned to categories in KMIME and attached to the data table (Color Manager -> Extract Colors -> Join), R will use the R, G, B, A columns to generate the colors for the categories. Multiple parameters are plotted as grid of subplots. 
To use a flow variable check box and type in variable name using the format: FLOWVAR(variable name) (doesn't work like this for grid of subplots)

Further options are:
- adjust y-axis: default = min-max +/- 5%; optional use of quantiles = (lower quantile * lower scale factor) until (upper quantile * upper scale factor);
	extended range factor: e.g. 0.05 extends y-axis by +/- 5%   
- use the scale factors to adjust a) point sizes of bulk and b) rest data as well as c) the legend size
- horizontal dashed and solid lines can be plotted
- title can be changed

Hint: use "Nominal row filter" node to select the categories to plot (former treatment column) and "Sorter" node to define well index. 
######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

# 1. Parameter selection
<group>
<hbox>
# a) Define column with categorial values
<combobox var = "catVar" label = "Categorial values" items = "-USE SELECTED TREATMENTS-,$$$STR_ATTRIBUTES$$$"/>
treatments = c(<listbox label="Treatments of interest" items="$$$DOMAIN('treatment')$$$" span="full" visible-row-count="15"/>);
</hbox>

# b) Define which parameter you would like to visualize
params =  c(<panellistbox label="Parameters" items="$$$NUM_ATTRIBUTES$$$" span="3"/>)
<hbox>
<checkbox  label="use flow variable" var="useFlowVar" selected="false"/>
<textfield label="flow variable:" var="flowVariable" data-type="text" default-value= "" size="10"/>
</hbox>
<gaprow height="1"/>

# c) Options for visualization
<separator label="more layout options" span="full"/>
<gaprow height="1"/>

<checkbox label="Use KNIME colors palette?" var="useKNIMEcolors" selected="false"/>
<separator label="                                                                                        y-axis scale factors: [lower quantile, upper quantile, lower scale factor, upper scale factor, extended range]                                        " aligment="center" span="full"/>
<hbox>
<checkbox label="Default y-Axis scale?" var="useDefaultyAxisScale" selected="true"/>
<vector label="y-axis scale factors:" var="yAxisScaleFactors" size="5" default-value="0.005,0.995,1,1,0" vector-type="character"/>
</hbox>

<hbox>
<textfield label="Bulk screen data term in categorial column" var="bulkDataTerm" data-type="text" default-value= "library" size="1"/>
<vector label="Scale factor: size of bulk points / category points / legend" var="scaleFactors" size="3" default-value="1,1,1" vector-type="character"/>
</hbox>

<vector label="Horizontal lines to be drawn (dashed, solid, dashed)" var="hlines" size="3" default-value=",," vector-type="character"/>
<hbox>
<textfield label="Title of plot:" var="title" data-type="text" default-value= "Trend plot: " size="1"/>
<checkbox label="Join parameter name with title?" var="useJoinParameterToTitle" selected="true"/>
</hbox>

</group>

<![CDATA[

#2.0 R code

#2.1.1 load libaries
library(grDevices)
library(grid)

#2.1.2 Define the data
if (catVar == "-USE SELECTED TREATMENTS-") {
	useTreatmentSelection <- TRUE
	catVar <- "treatment"
	} else {
	useTreatmentSelection <- FALSE
	}

if (useKNIMEcolors) {
	#generate color table from KNIME colors
	colorTable <- lapply(unique(kIn[,catVar]), FUN = function(x) {
		subdata <- subset(kIn, kIn[,catVar] == x, select = c(R, G, B, A, RGBA), drop = FALSE)[1,]
		})
	names(colorTable) <- unique(kIn[,catVar])
	colorTable <- do.call("rbind", colorTable)
	#if treatments are selected in GUI then color table should contain only selected treatments 
	if (useTreatmentSelection) colorTable <- colorTable[which(rownames(colorTable) %in% treatments),]
	factors <- rownames(colorTable)
	} else {
	#if treatments are selected in GUI then use selected treatments as factors 
	if (useTreatmentSelection) {
		factors <- levels(factor(treatments))
		} else {
		factors <- levels(factor(kIn[,catVar]))
		}
	}

#make the bulk data / library the first in the list 
if(bulkDataTerm %in% factors){
	if (useKNIMEcolors) {
		colorTable <- rbind(colorTable[which(rownames(colorTable) == bulkDataTerm),],colorTable[-which(rownames(colorTable) == bulkDataTerm),])
		factors <- rownames(colorTable)
		} else {
		factors <- c(bulkDataTerm, factors[- which(bulkDataTerm == factors)])
		}
	}

#2.2.1 manage RGG to R: define as numbers
hlines <- as.numeric(hlines)
scaleFactors <- as.numeric(scaleFactors)
yAxisScaleFactors <- as.numeric(yAxisScaleFactors)

#2.2.2 manage RGG to R: set scales to default and check scales
if (is.na(scaleFactors[1]) | scaleFactors[1] <= 0) 	scaleFactors[1] <- 1		#default
if (is.na(scaleFactors[2]) | scaleFactors[2] <= 0) 	scaleFactors[2] <- 1		#default
if (is.na(scaleFactors[3]) | scaleFactors[3] <= 0) 	scaleFactors[3] <- 1		#default

if (is.na(yAxisScaleFactors[1]) | (yAxisScaleFactors[1] < 0) | (yAxisScaleFactors[1] >= 1)) yAxisScaleFactors[1] <- 0
if (is.na(yAxisScaleFactors[2]) | (yAxisScaleFactors[2] <= 0) | (yAxisScaleFactors[2] > 1)) yAxisScaleFactors[2] <- 1
if (is.na(yAxisScaleFactors[3])) yAxisScaleFactors[3] <- 1
if (is.na(yAxisScaleFactors[4])) yAxisScaleFactors[4] <- 1
if (is.na(yAxisScaleFactors[5]) | (useDefaultyAxisScale)) yAxisScaleFactors[5] <- 0.05

#2.3 calculate
if (useFlowVar) params <- flowVariable

#2.4.1 layout plot
if (useKNIMEcolors) {
	factorColors <- rgb(colorTable$R, colorTable$G, colorTable$B, colorTable$A, names = NULL, max =  255) #uses KMINE colors (Color Manager -> Extract Colors -> Join color table)
	} else {
	factorColors <- colors()[c(185,121,150,100,48,490,98, round(runif(50,min=1, max = 600)))] #default definition of colors	
	}
factorSymbols = c(1,rep(19,4),rep(17,4),rep(15,4),rep(18,4),rep(22,50)); #definition of symbols see help pch
numGridRows = ifelse(length(params) > 1, 2, 1);
par(mfrow = c(numGridRows, ceiling(length(params) / numGridRows)))

# iterate over all parameters and create plots for all of them
lapply(params, FUN = function (param) {

if (useJoinParameterToTitle) title <- paste(title, names(kIn[param]))

#2.4.2 plot data

# iterate over categories
for(factor in factors){
	index = which(factors == factor)
	
	#set y-axis scale
	if (useDefaultyAxisScale) {
		yAxisScale <- extendrange(kIn[,param], f = yAxisScaleFactors[5])
		} else {
		yAxisScale <- c(quantile(kIn[, param], na.rm = TRUE, names = FALSE, yAxisScaleFactors[1]), quantile(kIn[, param], na.rm = TRUE, names = FALSE, yAxisScaleFactors[2])) * c(yAxisScaleFactors[3], yAxisScaleFactors[4])
		#check if data is there/yAxisScales are numbers (otherwise plot fails) then do subplot without data (no points are plotted)
		if ((is.na(yAxisScale)[1] == TRUE) || (is.na(yAxisScale)[2] == TRUE)
			|| (is.infinite(yAxisScale)[1] == TRUE) || (is.infinite(yAxisScale)[2] == TRUE)) {
			yAxisScale <- extendrange(kIn[,param], f = yAxisScaleFactors[5])
			} else {
			yAxisScale <- extendrange(r = yAxisScale, f = yAxisScaleFactors[5])
			}
		}

	if(index == 1){      #is it bulk data?
		plot(which(kIn[,catVar] == factor), kIn[which(kIn[,catVar] == factor), param], ylim = yAxisScale, main = title, xlab = "well index", ylab = names(kIn[param]), col = factorColors[index], pch = factorSymbols[index], xlim = c(1,nrow(kIn)), cex = scaleFactors[1])
		} else {
		points(which(kIn[,catVar] == factor), kIn[which(kIn[,catVar] == factor), param], col = factorColors[index], pch = factorSymbols[index], bg = factorColors[index], cex = scaleFactors[2])
		}
	}
	# adds horizontal lines
	abline(h = hlines[c(1,3)], lty = 2)
	abline(h = hlines[2], lwd = 1.5)
	# add the legend
	legend("topright", pch= factorSymbols[1:length(factors)], factors, col = factorColors, pt.bg = factorColors, cex = scaleFactors[3])
})

]]>
</rgg>
########################################################################################
# name: Factorized histogram/density plot grid, KNIME colors
# author: Holger Brandl, modified by Martin Stoeter
# category: basic/histograms
# preview: factorized_density_plot_grid.png

Creates a grid of density plots for selected columns and plots densities for each factor (group).

1) Select numerical variables. Each variable will result in a subplot. Multiple parameters are plotted as grid of subplots. 
 - To use a flow variable check box and type in variable name using the format: FLOWVAR(variable name) (doesn't work like this for grid of subplots)
2) Select a column that contains the factors/groups of densities to plot.

Options for visualization:
a) how to plot the data (filled densities, line densities and/or histogram).
b) adjust transparency for filled and line thickness for line densities, adjust number of bins
c) color palette that is used (KNIME colors: if colors were assigned to categories in KMIME and attached to the data table (Color Manager -> Extract Colors -> Join), R will use the R, G, B, A columns to generate the colors for the categories)
c) Select if background should be white.
d) optional title and whether parameter name should be plotted in title
######
<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>

<!-- 2. Configuration-->
# RGG-Configuration ==============================================================================================
<separator label="Options" span="full"/>
<gaprow height="1"/>
<group>
# a) Define your numerical attribute of interest
params = c(<panellistbox label="Numerical attributes" items="$$$NUM_ATTRIBUTES$$$" span="4"/>)

<hbox>
<h4 text="OR use flow variable"/>
<checkbox  label="" var="useFlowVar" selected="false"/>
<textfield label="flow variable:" var="flowVariable" data-type="text" default-value="" size="10"/>
</hbox>

# b) Define the grouping factor
<combobox var="factorName" items="$$$STR_ATTRIBUTES$$$" selected-item="treatment" label="Factor" span = "1"/>
</group>

<gaprow height="1"/>
<group>
# c) Options for visualization
<h3 text="More Layout Options" span = "full"/>

<separator label="Define plot mode" span="full"/>

<combobox var="plotDensityMode" items="filled curves, lines only" selected-item="fill curves" label="Plot density as" span = "1"/>
<hbox>
<checkbox label="Plot histogram" var="plotHistogram" selected="false"/>
<textfield label="Number of histogram bins:" var="numberOfBins" data-type="numeric" default-value="30" size="1"/>
</hbox>

<separator label="Define plot options" span="full"/>
<checkbox label="White background?" var="setBkgWhite" selected="false"/>
<textfield label="Alpha value (fill color):" var="alphaValue" data-type="numeric" default-value= "0.7" size="1"/>
<textfield label="Line thickness (line size):" var="lineSize" data-type="numeric" default-value= "0.5" size="1"/>
<combobox var="colorPalette" items="ggplot default,Accent,Dark2,Paired,Set1,Set2,Set3,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd,KNIME colors" label="Color palette:"/>
<combobox var="legendPosition" items="right,left,bottom,top,none" label="Legend position:"/>
<textfield label="Title of plot:" var="title" data-type="text" default-value= "" size="1" span = "1"/>
<textfield label="Base text size:" var="baseSize" data-type="numeric" default-value= "12" size="1"/>

</group>
# End of RGG-Configuration ==============================================================================================

<![CDATA[

# load libaries
library(ggplot2)
library(reshape)
library(plyr)

# define the (grouping factor)
factorIndex <- which(names(kIn) == factorName)
factors <- levels(factor(kIn[,factorName]))

# set paramters to flow variable if required
if (useFlowVar) params <- flowVariable

useKNIMEColors <- FALSE
if(colorPalette == "KNIME colors") useKNIMEColors <- TRUE

# for brewer palettes check possible values
nFactors <- length(factors)
t_set1 <- colorPalette == "Set1" & nFactors > 9
t_set2 <- colorPalette == "Set2" & nFactors > 8
t_set3 <- colorPalette == "Set3" & nFactors > 12
t_accent <- colorPalette == "Accent" & nFactors > 8
t_dark2 <- colorPalette == "Dark2" & nFactors > 8
t_paired <- colorPalette == "Paired" & nFactors > 12
if(t_set1 | t_set2 | t_set3 | t_accent | t_dark2 | t_paired) {
  warningMessage <- paste("Color set '", colorPalette, "' cannot be used for ", nFactors, " different values. Color palette is reset to ggplot default", sep = "")
  warning(warningMessage)
  colorPalette <- "ggplot default"
} 

if (useKNIMEColors) {
  # check if color model is joined to data table
  if (!length(which(c("R","G","B","A") %in% names(kIn))) == 4) {
    colorPalette <- "standard"
    warning("KNIME colors not available in input table, standard palette is used instead")
  # if yes, generate color table from KNIME colors
  } else { 
    # check whether colors belong to grouping factor  
    colorTable <- lapply(factors, FUN = function(x) {
      subdata <- subset(kIn, kIn[, factorName] == x, select = c(R, G, B, A, RGBA), drop = FALSE)
      if(length(unique(subdata$RGBA)) > 1) stop("KNIME color model does not fit to selected factor column")
      subdata[1,]
    })
    # create color vector
    names(colorTable) <- factors
    colorTable <- do.call("rbind", colorTable)
    factorColors <- rgb(colorTable$R, colorTable$G, colorTable$B, colorTable$A, max =  255) 
    names(factorColors) <- factors
  }
}

# reshape data
paramIdx <- which(names(kIn) %in% params)
plotData <- melt(kIn, id.vars = factorIndex, measure.vars = paramIdx)
names(plotData)[names(plotData) == factorName] <- "group"

groupedData <- dlply(plotData, .(variable))
groupedBinWidth <- llply(groupedData, .fun = function(data, nBins) {
  r <- range(data$value, na.rm = TRUE, finite = TRUE)
  r <- extendrange(r = r, f = 0.0)  #why extend by 0.0? makes no sense
  widthOfBins = (r[2] - r[1])/nBins
  if (is.na(widthOfBins) || is.infinite(widthOfBins) || (widthOfBins <= 0)) widthOfBins <- NULL
  widthOfBins
}, nBins = numberOfBins)

densData <- dlply(plotData, .(variable, group), .fun = function(subData){
  param <- subData$variable[1]
  group <- subData$group[1]
  d <- density(subData$value)
  bw <- groupedBinWidth[[param]]
  data.frame(x = d$x, y = d$y * nrow(subData) * bw , group = group, variable = param)
})

hLay <- mapply(function(x, b) geom_bar(aes(x = value, fill = group), position = position_dodge(), data = x, binwidth = b, alpha = alphaValue), 
              groupedData, groupedBinWidth)

dLay <- mapply(function(data) geom_density(data = data, aes(x = x, y = y), stat = "identity", fill = NA, size = lineSize, alpha = alphaValue), 
               densData)

# the actual plot
m <- ggplot(plotData, aes(x = value, color = group, fill = group, group = group))
if(plotHistogram) {
  m <- m + dLay
  m <- m + hLay
} else {
  if(plotDensityMode == "filled curves") m <- m + geom_density(alpha = alphaValue)
  if(plotDensityMode != "filled curves") m <- m + geom_density(fill = NA, size = lineSize, alpha = alphaValue)
}
if(useKNIMEColors) {
  m <- m + scale_color_manual(name = factorName, breaks = factors, labels = factors, values = factorColors)
  m <- m + scale_fill_manual(name = factorName, breaks = factors, labels = factors, values = factorColors)
} else {
  if(colorPalette == "ggplot default") {
    m <- m + scale_color_discrete(name = factorName)
    m <- m + scale_fill_discrete(name = factorName)
  } else {
    m <- m + scale_color_brewer(name = factorName, palette = colorPalette) 
    m <- m + scale_fill_brewer(name = factorName, palette = colorPalette)
  }
}
if(!is.na(title)) m <- m + ggtitle(label = title) 
m <- m + theme(legend.position = legendPosition)
if(!setBkgWhite) { m <- m + theme_gray(base_size = baseSize) 
} else { m <- m + theme_bw(base_size = baseSize) }
m <- m + facet_wrap( ~ variable,scales = "free")
print(m)

]]>
</rgg>
########################################################################################
# name: Scatter Plot Grid Replicates / XY - Plot
# author: Martin Stoeter
# category: relations
# preview: xy-plot_replicates.png

This scatter plot or XY-plot can be used to plot correlating data (e.g. experimental repeats). The table must contain a column with replicate information. Then another column must contain the sample identifier, which must be unique within a replicate (e.g. platenumber::well, but not barcode!), AND the same between the replicates. For the corresponding sample identifiers the data point will be plotted on x- and y-axis (e.g. for replicates A and B, if more than two replicated are present only the first two are considered).
For multiple selected parameters plots will appear as grid plot. To use a flow variable check box and type in variable name using the format: FLOWVAR(variable name) (doesn't work like this for grid of plots)
Data point will be plotted in different colors and shapes according to the categorial value. Missing values and sample identifiers with unequal categorial values will be removed/ignored.

Layout options:
- set title or use parameter name in title 
- adjust y-axis: default = min-max +/- 5%; optional use of quantiles = (lower quantile * lower scale factor) until (upper quantile * upper scale factor);
	extended range factor: e.g. 0.05 extends y-axis by +/- 5% 
- set legend position and size (scaling factor)
- linear regression and Pearson Correlation Coefficient can be plotted
- the bulk data term in column categorial values is plotted in grey circles (usually annotated as "library" in categorial column) and all other categories are plotted in different colors and shapes. If colors were assigned to categories in KMIME and attached to the data table (Color Manager -> Extract Colors -> Join), R will use the R, G, B, A columns to generate the colors for the categories. 
- use the scale factors to adjust a) point sizes of bulk and b) other data points 

Hint: use "Nominal row filter" node to select the categories to plot (former treatment column).

Trouble shooting:
a) "sampleID not unique" -> more than 1 sampleID (eg wells) per replicate
b) "not enough samples for correlation" -> sampleID for a replicate = 0 (no data to correlate)
HINT: use GroupBy[Unique concatenate with count(replicate)] on selected sampleID column, must be replicate count = 1 for each sampleID
######
<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

# 1. Parameter selection
<group>

<hbox>
# 2) select column that contains replicate annotation
<combobox var = "repColName" label = "Repetition" items = "$$$STR_ATTRIBUTES$$$"/>
# 3) select column that contains sample ID
<combobox var = "IDname" label = "Sample identifier" items = "$$$STR_ATTRIBUTES$$$"/>
</hbox>

# b) Define which parameter you would like to visualize
params =  c(<panellistbox label="Parameters" items="$$$NUM_ATTRIBUTES$$$" span="3"/>)
<hbox>
<checkbox  label="use flow variable" var="useFlowVar" selected="false"/>
<textfield label="flow variable:" var="flowVariable" data-type="text" default-value= "" size="10"/>
</hbox>

<hbox>
# a) Define column with categorial values
<combobox var = "catVar" label = "Categorial values" items = "-DONT USE CATEGORIES-,-USE SELECTED TREATMENTS-,$$$STR_ATTRIBUTES$$$"/>
treatments = c(<listbox label="Treatments of interest" items="$$$DOMAIN('treatment')$$$" span="full" visible-row-count="5"/>);
</hbox>

# c) Options for visualization
<gaprow height="1"/>
<separator label="Layout Options Title" span="full"/>
<hbox>
<textfield label="Title of plot:" var="title" data-type="text" default-value= "XY plot: " size="1"/>
<checkbox label="Join parameter name with title?" var="useJoinParameterToTitle" selected="true"/>
</hbox>

<gaprow height="1"/>
<separator label="Layout Options Axis Scales" span="full"/>
<separator label="                                                                                x/y-axis scale factors: [lower quantile, upper quantile, lower scale factor, upper scale factor, extended range]                                                                                          " aligment="center" span="full"/>
<hbox>
<checkbox label="Default x-Axis?" var="useDefaultxAxisScale" selected="true"/>
<vector label="Scale factors [x]:" var="xAxisScaleFactors" size="5" default-value="0.005,0.995,1,1,0" vector-type="character"/>
</hbox>
<hbox>
<checkbox label="Default y-Axis?" var="useDefaultyAxisScale" selected="true"/>
<vector label="Scale factors [y]:" var="yAxisScaleFactors" size="5" default-value="0.005,0.995,1,1,0" vector-type="character"/>
</hbox>

<gaprow height="1"/>
<separator label="Layout Options Legend" span="full"/>
<hbox>
legendPosition = <combobox label = "Legend position:" items = "bottomright,topleft,bottomleft,topright,none"/>
legendSize = <vector label="Legend Size:" size="1" default-value="1" vector-type="character"/>
</hbox>

<gaprow height="1"/>
<separator label="Layout Options Regression/Colors/Data Points" span="full"/>
<hbox>
<checkbox label="Plot regression?" var="useRegression" selected="true"/>
<checkbox label="Plot Pearson corr. coeff.?" var="usePearson" selected="true"/>
<checkbox label="Use KNIME colors palette?" var="useKNIMEcolors" selected="false"/>
</hbox>
<hbox>
<textfield label="Bulk screen data term:" var="bulkDataTerm" data-type="text" default-value= "library" size="1"/>
<vector label="Point Size [bulk points, category points]:" var="scaleFactors" size="2" default-value="1,1" vector-type="character"/>
<vector label="Text factor [Pearson text]:" var="pearsonTextFactor" size="1" default-value="0.7" vector-type="character"/>
</hbox>



</group>

<![CDATA[
#2.0 R code

#2.1.1 load libaries
library(grDevices)
library(grid)

#2.1.2 Define the data
if (catVar == "-USE SELECTED TREATMENTS-") {
	useTreatmentSelection <- TRUE
	catVar <- "treatment"
	} else {
	useTreatmentSelection <- FALSE
	}
if (catVar == "-DONT USE CATEGORIES-") {
	kIn$tempCatVar <- "noCatVar"
	scaleFactors[1] <-"noCatVar"
	legendPosition <- "none"
	catVar <- "tempCatVar"
	}	

if (useKNIMEcolors) {
	#generate color table from KNIME colors
	colorTable <- lapply(unique(kIn[,catVar]), FUN = function(x) {
		subdata <- subset(kIn, kIn[,catVar] == x, select = c(R, G, B, A, RGBA), drop = FALSE)[1,]
		})
	names(colorTable) <- unique(kIn[,catVar])
	colorTable <- do.call("rbind", colorTable)
	#if treatments are selected in GUI then color table should contain only selected treatments 
	if (useTreatmentSelection) colorTable <- colorTable[which(rownames(colorTable) %in% treatments),]
	factors <- rownames(colorTable)
	} else {
	#if treatments are selected in GUI then use selected treatments as factors 
	if (useTreatmentSelection) {
		factors <- levels(factor(treatments))
		} else {
		factors <- levels(factor(kIn[,catVar]))
		}
	}

#make the bulk data / library the first in the list 
if(bulkDataTerm %in% factors){
	if (useKNIMEcolors) {
		colorTable <- rbind(colorTable[which(rownames(colorTable) == bulkDataTerm),],colorTable[-which(rownames(colorTable) == bulkDataTerm),])
		factors <- rownames(colorTable)
		} else {
		factors <- c(bulkDataTerm, factors[- which(bulkDataTerm == factors)])
		}
	}

#2.2.1 manage RGG to R: define as numbers
legendSize <- as.numeric(legendSize)
scaleFactors <- as.numeric(scaleFactors)
xAxisScaleFactors <- as.numeric(xAxisScaleFactors)
yAxisScaleFactors <- as.numeric(yAxisScaleFactors)
pearsonTextFactor <- as.numeric(pearsonTextFactor)

#2.2.2 manage RGG to R: set scales to default and check scales
if (is.na(scaleFactors[1]) | scaleFactors[1] <= 0) 	scaleFactors[1] <- 1		#default
if (is.na(scaleFactors[2]) | scaleFactors[2] <= 0) 	scaleFactors[2] <- 1		#default
if (is.na(legendSize) | legendSize <= 0) 	legendSize <- 1		#default
if (legendPosition == "none"){
	plotLegend <- FALSE
	legendPosition <- "bottomright"
	} else {
	plotLegend <- TRUE
	}

if (is.na(xAxisScaleFactors[1]) | (xAxisScaleFactors[1] < 0) | (xAxisScaleFactors[1] >= 1)) xAxisScaleFactors[1] <- 0
if (is.na(xAxisScaleFactors[2]) | (xAxisScaleFactors[2] <= 0) | (xAxisScaleFactors[2] > 1)) xAxisScaleFactors[2] <- 1
if (is.na(xAxisScaleFactors[3])) xAxisScaleFactors[3] <- 1
if (is.na(xAxisScaleFactors[4])) xAxisScaleFactors[4] <- 1
if (is.na(xAxisScaleFactors[5]) | (useDefaultxAxisScale)) xAxisScaleFactors[5] <- 0.05
if (is.na(yAxisScaleFactors[1]) | (yAxisScaleFactors[1] < 0) | (yAxisScaleFactors[1] >= 1)) yAxisScaleFactors[1] <- 0
if (is.na(yAxisScaleFactors[2]) | (yAxisScaleFactors[2] <= 0) | (yAxisScaleFactors[2] > 1)) yAxisScaleFactors[2] <- 1
if (is.na(yAxisScaleFactors[3])) yAxisScaleFactors[3] <- 1
if (is.na(yAxisScaleFactors[4])) yAxisScaleFactors[4] <- 1
if (is.na(yAxisScaleFactors[5]) | (useDefaultyAxisScale)) yAxisScaleFactors[5] <- 0.05
if (is.na(pearsonTextFactor) | (pearsonTextFactor <= 0) | (pearsonTextFactor > 10)) pearsonTextFactor <- 0.7

#define replicates and check: e.g A,B
repVector <- unique(kIn[, repColName])
if(length(repVector) < 2) repVector <- c(repVector[1], repVector[1])

#2.3 calculate
if (useFlowVar) params <- flowVariable

#2.4.1 layout plot
if (useKNIMEcolors) {
	factorColors <- rgb(colorTable$R, colorTable$G, colorTable$B, colorTable$A, names = NULL, max =  255) #uses KMINE colors (Color Manager -> Extract Colors -> Join color table)
	} else {
	factorColors <- colors()[c(185,121,150,100,48,490,98, round(runif(50,min=1, max = 600)))] #default definition of colors	
	}
factorSymbols = c(1,rep(19,4),rep(17,4),rep(15,4),rep(18,4),rep(22,50)); #definition of symbols see help pch
numGridRows = ifelse(length(params) > 1, 2, 1);
par(mfrow = c(numGridRows, ceiling(length(params) / numGridRows)))

# iterate over all parameters and create plots for all of them
lapply(params, FUN = function (param) {
	if (useJoinParameterToTitle) title <- paste(title, names(kIn[param]))
	#param <- params[1]#define first (X) and second (Y) table/replicate to be merged/plotted
	kInXtable <- kIn[which(kIn[,repColName] == repVector[1]),c(IDname, repColName, catVar, param)]
	kInYtable <- kIn[which(kIn[,repColName] == repVector[2]),c(IDname, repColName, catVar, param)]
	#check if sampleIDs are unique
	if (length(unique(kInXtable[,IDname])) == length(kInXtable[,IDname]) & length(unique(kInYtable[,IDname])) == length(kInYtable[,IDname])) {
		corrTable <- merge(kInXtable[,c(IDname, repColName, catVar, param)], kInYtable[,c(IDname, repColName, catVar, param)], by.x = IDname, by.y =IDname)
		names(corrTable) <- c(IDname,"repX","catVarX","X","repY","catVarY","Y")
		#check consitency of table after merge
		corrTable <- corrTable[which(!is.na(corrTable$X) & !is.na(corrTable$Y)),]
		corrTable <- corrTable[which(corrTable$catVarX == corrTable$catVarY),]
		#check if XYtable match is bigger than 1
		sampleIDmatch <- length(corrTable[,1])
		if (sampleIDmatch > 1) {		
			#set x-axis scale
			if (useDefaultxAxisScale) {
				xAxisScale <- extendrange(kInXtable[,param], f = xAxisScaleFactors[5])
				} else {
				xAxisScale <- c(quantile(kInXtable[,param], na.rm = TRUE, names = FALSE, xAxisScaleFactors[1]), quantile(kInXtable[, param], na.rm = TRUE, names = FALSE, xAxisScaleFactors[2])) * c(xAxisScaleFactors[3], xAxisScaleFactors[4])
			#check if data is there/xAxisScales are numbers (otherwise plot fails) then do subplot without data (no points are plotted)
				if ((is.na(xAxisScale)[1] == TRUE) || (is.na(xAxisScale)[2] == TRUE) || (is.infinite(xAxisScale)[1] == TRUE) || (is.infinite(xAxisScale)[2] == TRUE)) {
					xAxisScale <- extendrange(kInXtable[,param], f = xAxisScaleFactors[5])
					} else {
					xAxisScale <- extendrange(r = xAxisScale, f = xAxisScaleFactors[5])
					}
				}
			#set y-axis scale
			if (useDefaultyAxisScale) {
				yAxisScale <- extendrange(kInYtable[,param], f = yAxisScaleFactors[5])
				} else {
				yAxisScale <- c(quantile(kInYtable[,param], na.rm = TRUE, names = FALSE, yAxisScaleFactors[1]), quantile(kInYtable[, param], na.rm = TRUE, names = FALSE, yAxisScaleFactors[2])) * c(yAxisScaleFactors[3], yAxisScaleFactors[4])
			#check if data is there/yAxisScales are numbers (otherwise plot fails) then do subplot without data (no points are plotted)
				if ((is.na(yAxisScale)[1] == TRUE) || (is.na(yAxisScale)[2] == TRUE) || (is.infinite(yAxisScale)[1] == TRUE) || (is.infinite(yAxisScale)[2] == TRUE)) {
					yAxisScale <- extendrange(kInYtable[,param], f = yAxisScaleFactors[5])
					} else {
					yAxisScale <- extendrange(r = yAxisScale, f = yAxisScaleFactors[5])
					}
				}
#2.4.2 plot data
			# iterate over categories
			for(factor in factors){
				index = which(factors == factor)
				if(index == 1){      #is it bulk data?
					xAxisTitle <- paste(param," ( ",corrTable$repX[1]," )",sep="")
					yAxisTitle <- paste(param," ( ",corrTable$repY[1]," )",sep="")
					plot(corrTable$X[which(corrTable$catVarX == factor)],corrTable$Y[which(corrTable$catVarX == factor)], xlim = xAxisScale, ylim = yAxisScale, main = title, xlab = xAxisTitle, ylab = yAxisTitle, col = factorColors[index], pch = factorSymbols[index], cex = scaleFactors[1])
					} else {
					points(corrTable$X[which(corrTable$catVarX == factor)],corrTable$Y[which(corrTable$catVarX == factor)], col = factorColors[index], pch = factorSymbols[index], bg = factorColors[index], cex = scaleFactors[2])
					}
				}
			# add the legend
			legend(legendPosition, pch= factorSymbols[1:length(factors)], factors, col = factorColors, pt.bg = factorColors, cex = legendSize, plot = plotLegend)
			# adds regression lines
			if(useRegression){
				regression <- lm(corrTable$Y ~ corrTable$X)
				abline(regression)
				}
			if(usePearson){
				correlation <- cor.test(corrTable$X,corrTable$Y, method = "pearson")
				corrEstimate <- correlation$"estimate"
				mtext(paste("Pearson correlation = ",round(corrEstimate, digits = 3),", n = ",sampleIDmatch), adj = 0, line = 0, cex = pearsonTextFactor)
				}
			} else { #error empty table
			plot(0,0)	
			mtext("not enough samples for correlation", adj = 0, line = 0.5, cex = 1.5)		
			}
		} else { #error table merge didnt fit (check sample IDs)
		plot(0,0)	
		mtext("sampleID not unique", adj = 0, line = 0.5, cex = 1.5)
		}
	})
]]>
</rgg>
########################################################################################
# name: Lineplot with plot options
# author: Martin Stoeter, modified from Antje Niederleins' Barplot 
# category: basic/lineplots
# preview: LinePlot.png

Flexible template to create a line plot or line plot grid with optional errorbars
HINT: use GroupBy node to aggregated the data to e.g mean and sd columns 

Parameter:
Bar height - One or multiple numerical variables. Each value will result in one bar
Error bar checkbox - Draw errorbars?
Error bar - Error bar values corresponding to the height values (same number of columns have to be selected)
To use a flow variable check box and type in variable names using the format: FLOWVAR(variable name)
x-axis - Label to put at the x-axis for each bar (mulitple columns can be selected to combine information)
2D-grid grouping parameter - Allows to split the dataset into multiple plots by this condition (multiple columns can be selected to combine information)
bar colour - Colour bars by condition (mulitple columns can be selected to combine information)
Layout Options: 
 - select background/theme and set general font size in plot (default = 14)
 - plot points or lines or both
 - set size and alpha value (transparency) of points, lines and error bars (default = [2,0.5,0.1] and [1,0.5,0.5])
 - select different color models for the plot (see: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#rcolorbrewer-palette-chart )
 - optional the rows and columns can be defined for the 2D grid
 - give plot title and title factor (default = 1.2)
 - x-axis test: angle, text size factor for x-/y-axis (default = 0.8) 
 - y-axis title (or use parameter name: for 2D grid => 'height'), axis title factor (default = 1.0)
 - adjust y-axis scale (check fixed and enter min + max; free for 2D grid)
 - give legend title, adjust position (fixed position outside diagram or free(range:0-1): [0.1,0.9] = top-left) and legend title/text size factor(default = 0.8)   
######

<rgg>

    <!--1. Title and short description -->
    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>

    <gaprow height="1"/>

    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    #1.0 Parameter selection
	#R debugging: delete all variables except kIn
	#rm(list=ls(all=TRUE)[which(ls(all=TRUE) != "kIn")])
	<group>

	# Define your numerical parameters represented by bar height
	barHeight = c(<panellistbox label="select columns with values for bar height" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

	# Define your numerical parameters for error bars
	<hbox>  
	plot.Errorbars = <checkbox label="draw errorbars (select column with errorbar values)" selected="t"/>
	plot.Errorbars.Plus = <checkbox label="draw positive error" selected="t"/>
	plot.Errorbars.Negative = <checkbox label="draw negative error" selected="t"/>
	</hbox> 
	
	barError = c(<panellistbox label="cErrorBars" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)
	<gaprow height="2"/>

	<hbox>  #define use of flow variables
	<checkbox label="use flow variable" var="useFlowVar" selected="false" />
	<textfield label="bar height flow variable:" var="flowVariableBarHeight" data-type="text" default-value= "" size="10" />
	<textfield label="bar error flow variable:" var="flowVariableBarError" data-type="text" default-value= "" size="10" />
	</hbox>

	<hbox>  #define x-axis, grid and color group
	xFactor = c(<listbox label="x-axis" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	facetBy = c(<listbox label="2D grid grouping parameters" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	colourBy = c(<listbox label="coloured by" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	<combobox var="colorPalette" items="ggplot default,Set1,Set2,Set3,Accent,Dark2,Paired,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd,KNIME colors" label="Color palette:"/>
	</hbox>
	
 	#diagram options
	<separator label="Layout Options General Plot" span="full"/>
	<hbox>
	plotPointsLines = <combobox label = "Points and/or lines:" items = "points_and_lines,points_only,lines_only"/>
	pointLineSize = as.numeric(c(<vector label="Size [points/lines/error]:" size="3" default-value="2,0.5,0.1"/>))
	alphaValue = as.numeric(c(<vector label="Alpha [points/lines/error]:" size="3" default-value="1,0.5,0.5"/>))
	</hbox>
	<hbox>
	plotTheme = <combobox items="grey,black-white,linedraw,light,classic" label="background/theme:"/>
	plotTextSize = as.numeric(c(<vector label="font size [plot]:" size="1" default-value="14"/>))
	twoDgridRow = c(<vector label="2D grid [row]:" size="1" default-value="-AUTO-"/>)
	twoDgridColumn = c(<vector label="2D grid [column]:" size="1" default-value="-AUTO-"/>)
	</hbox>

	<separator label="Layout Options Title" span="full"/>
	<hbox>
	<textfield label="plot title:" var="plotTitle" data-type="text" default-value= "" size="5"/>
	plotTitleSize = as.numeric(c(<vector label="text size [title]:" size="1" default-value="1.2"/>))
	</hbox>

	<separator label="Layout Options Axes" span="full"/>	
	<hbox>
	xAngle = as.numeric(c(<combobox label = "angle of x-axis labels:" items = "0,45,90"/>))
	axisTextSizeFactor = as.numeric(c(<vector label="axis text size [x/y]:" size="2" default-value="0.8,0.8"/>))
	</hbox>
	
	<hbox>
	<textfield label="y-axis title:" var="yAxisLabel" data-type="text" default-value= "" size="3"/>
	useParameternameAsAxisLabel = <checkbox label="use parameter name" selected="f"/>
	axisTitleSizeFactor = as.numeric(c(<vector label="axis title size [x/y]:" size="2" default-value="1.0,1.0"/>))
	</hbox>

	<hbox>
	useManualYaxisScale = <checkbox label="use fixed y-axis scale" selected="f"/>
	yAxisScale = as.numeric(c(<vector label="y-axis scale [min,max]:" size="2" default-value=","/>))
	free.scales = <checkbox label="use free y-scales (for 2D grid)" selected="t"/>
	</hbox>

	<hbox>
    yAxisScaleLog10 = <checkbox label="logarithmic y-axis scale" selected="f"/>
    yAxisTextLog10 = <checkbox label="logarithmic y-axis numbers" selected="f"/>
	</hbox>

	<separator label="Layout Options Legend" span="full"/>
	<hbox>
	legendPosition = <combobox label = "legend position:" items = "right,top,bottom,left,none"/>
	useLegendCoordinate = <checkbox label="use legend coordinate" selected="f"/>
	legendCoordinate = as.numeric(c(<vector label="coordinate [x,y]:" size="2" default-value="0.0,1.0"/>))
	</hbox>
	
	<hbox>
	legendTitle = <textfield label="legend title:" data-type="text" default-value="" size="3"/>
	legendTextSizeFactor = as.numeric(c(<vector label="text size [title,text]:" size="2" default-value="0.8,0.8"/>))
	rotateLegend = <checkbox label="rotate 90deg." selected="f"/>
	</hbox>

	</group>

	<![CDATA[
	#2.0 R code	

	#2.1 load libaries
	library(ggplot2)
	library(reshape)
	library(grid)
	library(RColorBrewer)
	library(scales)

	#2.2.1 manage RGG to R: define as numbers / check input parameters
	# check flow variables
	if (useFlowVar && !is.na(flowVariableBarHeight)) {
    	barHeight <- flowVariableBarHeight
	}
	if(plot.Errorbars && useFlowVar && !is.na(flowVariableBarError)) {
		barError <- flowVariableBarError
	}
	# no bar height columns selected
	if(is.null(barHeight)) stop("Error: Template initialization fails - no columns for bar height selected")
	# errorbars checked but no column selected
	if(plot.Errorbars & is.null(barError)) plot.Errorbars <- FALSE	# simply don't plot any errorbars
	if(plot.Errorbars & length(barHeight) != length(barError)) stop("Error: Template initialization fails - number of bar height columns not equal to number of error bar columns")
	# no xFactor selected
	if("-NO SELECTION-" %in% xFactor) xFactor <- NULL
	if("-NO SELECTION-" %in% facetBy) facetBy <- NULL
	if("-NO SELECTION-" %in% colourBy) colourBy <- NULL

	xFactorFlag <- facetFlag <- colourFlag <- FALSE
	if(is.null(xFactor)) xFactor <- "-ROW ID-"
	if(!is.null(xFactor) && "-USE COLUMN SELECTION-" %in% xFactor) { xFactorCol <- NULL; xFactorFlag <- TRUE } else xFactorCol <- xFactor
	if(!is.null(facetBy) && "-USE COLUMN SELECTION-" %in% facetBy) { facetCol <- NULL; facetFlag <- TRUE } else facetCol <- facetBy
	if(!is.null(colourBy) && "-USE COLUMN SELECTION-" %in% colourBy) { colourCol <- NULL; colourFlag <- TRUE } else colourCol <- colourBy

	useKNIMEColors <- colorPalette == "KNIME colors"

	# for brewer palettes check possible values
	nFactors <- length(colourCol)
	brewerTable <- do.call("cbind", brewer.pal.info)
	rownames(brewerTable) <- rownames(brewer.pal.info)
	if (colorPalette %in% rownames(brewerTable) && !useKNIMEColors) {
		if (brewerTable[which(rownames(brewerTable) == colorPalette),"maxcolors"] < nFactors) colorPalette <- "ggplot default"
	} else {
		warningMessage <- paste("Color set '", colorPalette, "' cannot be used for ", nFactors, " different values. Color palette is reset to ggplot default", sep = "")
		warning(warningMessage)
		colorPalette <- "ggplot default"
	}
	
	if(free.scales) free.scales <- "free_y" else free.scales <- "fixed"
	# 2D grid options (define rows and columns)
	if(is.na(as.numeric(twoDgridRow))) {twoDgridRow <- NULL  #e.g. is equal to "-AUTO-"
		} else twoDgridRow <- round(as.numeric(twoDgridRow))
	if(is.na(as.numeric(twoDgridColumn))) {twoDgridColumn <- NULL  #e.g. is equal to "-AUTO-"
		} else twoDgridColumn <- round(as.numeric(twoDgridColumn))
	
	#2.2.2 manage RGG to R: set scales to default and check scales
	if (is.na(pointLineSize[1]) | (pointLineSize[1] < 0) | (pointLineSize[1] > 40)) pointLineSize[1] <- 2
	if (is.na(pointLineSize[2]) | (pointLineSize[2] < 0) | (pointLineSize[2] > 40)) pointLineSize[2] <- 0.5
	if (is.na(pointLineSize[3]) | (pointLineSize[3] < 0) | (pointLineSize[3] > 10)) pointLineSize[3] <- 0.1
	if (is.na(alphaValue[1]) | (alphaValue[1] < 0) | (alphaValue[1] > 1)) pointLineSize[1] <- 1
	if (is.na(alphaValue[2]) | (alphaValue[2] < 0) | (alphaValue[2] > 1)) pointLineSize[2] <- 0.5
	if (is.na(alphaValue[3]) | (alphaValue[3] < 0) | (alphaValue[3] > 1)) pointLineSize[3] <- 0.5
	if (is.na(plotTitle))	plotTitle <- NULL		#default if no title is given
	if (is.na(plotTextSize[1]) | (plotTextSize[1] < 0) | (plotTextSize[1] > 40)) plotTextSize[1] <- 14
	if (is.na(plotTitleSize[1]) | (plotTitleSize[1] < 0) | (plotTitleSize[1] > 5)) plotTitleSize[1] <- 1.2
	if (is.na(yAxisLabel))	yAxisLabel <- NULL
	if (is.na(xAngle))	xAngle <- 0
	if (is.na(axisTextSizeFactor[1]) | (axisTextSizeFactor[1] < 0) | (axisTextSizeFactor[1] > 5)) axisTextSizeFactor[1] <- 0.8
	if (is.na(axisTextSizeFactor[2]) | (axisTextSizeFactor[2] < 0) | (axisTextSizeFactor[2] > 5)) axisTextSizeFactor[2] <- 0.8
	if (is.na(axisTitleSizeFactor[1]) | (axisTitleSizeFactor[1] < 0) | (axisTitleSizeFactor[1] > 5)) axisTitleSizeFactor[1] <- 1
	if (is.na(axisTitleSizeFactor[2]) | (axisTitleSizeFactor[2] < 0) | (axisTitleSizeFactor[2] > 5)) axisTitleSizeFactor[2] <- 1
	if (is.na(yAxisScale[1]) | is.na(yAxisScale[2]))	yAxisScale <- NULL
	if (useParameternameAsAxisLabel) yAxisLabel <- barHeight
	if (is.na(legendCoordinate[1]) | is.na(legendCoordinate[2]) | (legendCoordinate[1] < 0) | (legendCoordinate[1] > 1) | (legendCoordinate[2] < 0) | (legendCoordinate[2] > 1)) useLegendCoordinate <- FALSE
	if (is.na(legendTextSizeFactor[1]) | (legendTextSizeFactor[1] < 0) | (legendTextSizeFactor[1] > 5)) legendTextSizeFactor[1] <- 0.8
	if (is.na(legendTextSizeFactor[2]) | (legendTextSizeFactor[2] < 0) | (legendTextSizeFactor[2] > 5)) legendTextSizeFactor[2] <- 0.8
	if (xAngle == 0 ) xAxisAjust <- c(0.5,1.0) #xAxisAjust = c(hjust,vjust)
	if (xAngle == 45) xAxisAjust <- c(1.0,1.0)	
	if (xAngle == 90) xAxisAjust <- c(1.0,0.5)	

	#2.3 calculate
	# create rowID column if needed
	if("-ROW ID-" %in% xFactorCol) kIn[,"-ROW ID-"] <- rownames(kIn)

	# combine columns if necessary
	if(length(xFactor) > 1) {
		xFactorCol <- paste(xFactor, collapse = " + ")
		kIn[,xFactorCol] <- apply(kIn[,xFactor], 1, paste, collapse = " + ")
	}
	if(length(facetBy) > 1) {
		facetCol <- paste(facetBy, collapse = " + ")
		kIn[,facetCol] <- apply(kIn[,facetBy], 1, paste, collapse = " + ")
	}
	if(length(colourBy) > 1) {
		colourCol <- paste(colourBy, collapse = " + ")
		kIn[,colourCol] <- apply(kIn[,colourBy], 1, paste, collapse = " + ")
	}
	
	# extract necessary data and reshape it
	meanData <- kIn[,c(barHeight,xFactorCol, facetCol, colourCol)]

	meanDataLong <- melt(meanData, measure.vars = barHeight, variable_name = "- PARAMETERS -")
	names(meanDataLong)[which(names(meanDataLong) == "value")] <- "height"

	#check if values/data is there, to prevent R error message
	if(length(which(!is.na(meanDataLong$height))) == 0){
		meanDataLong$height[1] <- 0
		plotErrorMessage <- TRUE
		} else {
		plotErrorMessage <-FALSE
	}
	
	# add errorbar data
	if(plot.Errorbars) {
		sdData <- kIn[,c(barError,xFactorCol, facetCol, colourCol)]
		sdDataLong <- melt(sdData, measure.vars = barError)
		meanDataLong$error <- sdDataLong$value
		if(plot.Errorbars.Negative) {
			meanDataLong$low <- with(meanDataLong, height - error)
		} else {
			meanDataLong$low <- with(meanDataLong, height)
		}
		if(plot.Errorbars.Plus) {
			meanDataLong$high <- with(meanDataLong, height + error)
		} else {
			meanDataLong$high <- with(meanDataLong, height)
		}
		if(yAxisScaleLog10) {
			meanDataLong[which(meanDataLong$low < 0),"low"] <- 0.000000001
		}
	}

	if(xFactorFlag) xFactorCol <- "- PARAMETERS -"
	if(facetFlag) facetCol <- "- PARAMETERS -"
	if(colourFlag) colourCol <- "- PARAMETERS -"

	if(is.na(legendTitle)) legendTitle <- colourCol		#default if no title is given
	
	if(!is.null(facetBy)) { 
		facetTitle <- facetCol
		meanDataLong$template.facet.column <- meanDataLong[,facetCol]
		facetCol <- "template.facet.column"
	}
	if (is.null(colourCol)) {   #set grouping column for line plot
		groupData <- "- PARAMETERS -"
		} else {
		groupData <- colourCol
		}
			
	if(!is.null(colourBy)) meanDataLong[,colourCol] <- factor(meanDataLong[,colourCol])

	#convert to discrete format
	meanDataLong[,xFactorCol] <- factor(meanDataLong[,xFactorCol])
	meanDataLong[,"ggplot_groupid"] <- 1 : nrow(meanDataLong)  # variable colorCol needs to be replaced with ggplot_groupid

	#2.4.1 plot
	p <- ggplot(meanDataLong, aes(x = get(xFactorCol), y = height, group = ggplot_groupid))

	my.dodge <- position_dodge(width=0.9)
	if(!is.null(colourBy)) {
		if(plotPointsLines == "points_and_lines" || plotPointsLines == "points_only") {
			p <- p + geom_point(aes(colour = factor(get(colourCol))), position = my.dodge, size = pointLineSize[1], alpha = alphaValue[1])}
		if(plotPointsLines == "points_and_lines" || plotPointsLines == "lines_only") {
			p <- p + geom_line(aes(colour = factor(get(colourCol)), group = get(groupData)), size = pointLineSize[2], alpha = alphaValue[2])}
		if(plot.Errorbars) {
			p <- p + geom_errorbar(aes(colour = factor(get(colourCol)), ymin = low, ymax = high, group = get(colourCol)), width = pointLineSize[3], alpha = alphaValue[3])}
		} else { 
		if(plotPointsLines == "points_and_lines" || plotPointsLines == "points_only") {
			p <- p + geom_point(colour = "black", position = my.dodge, size = pointLineSize[1], alpha = alphaValue[1])}
		if(plotPointsLines == "points_and_lines" || plotPointsLines == "lines_only") {
			p <- p + geom_line(aes(group = get(groupData)), colour = "black", size = pointLineSize[2], alpha = alphaValue[2])}
		if(plot.Errorbars) {
			p <- p + geom_errorbar(aes(ymin = low, ymax = high), colour = "black", width = pointLineSize[3], alpha = alphaValue[3])}
	}

	if(!is.null(facetBy)) {
		p <- p + facet_wrap(~ template.facet.column, nrow = twoDgridRow, ncol = twoDgridColumn, scales=free.scales)
		fTitle <- paste("Grid factor: ",facetTitle,sep = "")
		if(!is.null(plotTitle)) plotTitle <- paste(plotTitle,fTitle,sep = " / ") else plotTitle <- fTitle
		p <- p + ggtitle(plotTitle)
		} else {
		if(!is.null(plotTitle)) p <- p + ggtitle(plotTitle)
	}
	
	#2.4.1 layout plot
	#general
	if(plotTheme == "grey")	p <- p + theme_grey(base_size=plotTextSize[1])
	if(plotTheme == "black-white")	p <- p + theme_bw(base_size=plotTextSize[1])
	if(plotTheme == "linedraw")	p <- p + theme_linedraw(base_size=plotTextSize[1])	
	if(plotTheme == "light")	p <- p + theme_light(base_size=plotTextSize[1])
	if(plotTheme == "classic")	p <- p + theme_classic(base_size=plotTextSize[1])

	#2.4.2 set general layout of plot
	#title options
	p <- p + theme(plot.title = element_text(size = plotTextSize[1] * plotTitleSize[1]))

	#axis label options
	p <- p + labs(x = xFactorCol, y = yAxisLabel)
	p <- p + theme(axis.title.x = element_text(size = plotTextSize[1] * axisTitleSizeFactor[1]), axis.title.y = element_text(size = plotTextSize[1] * axisTitleSizeFactor[2]))
	p <- p + theme(axis.text.x = element_text(angle = xAngle, hjust = xAxisAjust[1], vjust = xAxisAjust[2], size = plotTextSize[1] * axisTextSizeFactor[1]), axis.text.y = element_text(size = plotTextSize[1] * axisTextSizeFactor[2]))
	
	# fixing the y-axis labeling, make parameter name or custom y-axis label instead of "height", only if no multi-parameteric plot and only if no y-Axis label was added in the GUI
	if(((!is.null(facetBy) && "-USE COLUMN SELECTION-" %in% facetBy )|| length(barHeight) > 1) && is.null(yAxisLabel)) yAxisLabel <- "height"
	
	if(useManualYaxisScale) p <- p + coord_cartesian(ylim = yAxisScale) 

	if(yAxisScaleLog10) {
		p <- p + scale_y_log10(name = yAxisLabel)   # do y-axis in log 10 scale
		if(yAxisTextLog10) p <- p + scale_y_log10(name = yAxisLabel, breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
	} else {
		p <- p + scale_y_continuous(name = yAxisLabel)   # do normal y-axis 
		if(yAxisTextLog10) p <- p + scale_y_continuous(name = yAxisLabel, breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) 
	}
	
	# color model checks: is it available? is it defined for the grouping column?
	if(useKNIMEColors && !exists("kIn.color.model")) {
		stop("No KNIME color model provided. Script was stopped!")
		useKNIMEColors <- FALSE
	}
	if(useKNIMEColors && names(kIn.color.model[1]) != colourCol) {
		stop(paste("KNIME color model is different (", names(kIn.color.model[1]), ") from selected color grouping column (", colourCol, ") in template. Script was stopped!"))
		useKNIMEColors <- FALSE
	} 
	if(useKNIMEColors) {
		kIn.color.model$color <- as.character(kIn.color.model$color)
		colourCol <- names(kIn.color.model)[1]
		factorColors <- kIn.color.model[,2]
		names(factorColors) <- kIn.color.model[,1]
	}
	
	# color settings		
	if(useKNIMEColors) {
		p <- p + scale_color_manual(name = colourCol, values = factorColors)
		p <- p + scale_fill_manual(name = colourCol, values = factorColors)
	} else {
		if(colorPalette == "ggplot default") {
			p <- p + scale_color_discrete(name = colourCol)
			p <- p + scale_fill_discrete(name = colourCol)
		} else {
			p <- p + scale_color_brewer(name = colourCol, palette = colorPalette) 
			p <- p + scale_fill_brewer(name = colourCol, palette = colorPalette)
		}
	}
	
	#legend: legend title, text style and rotation
	p <- p + guides(fill = guide_legend(title = legendTitle)) + theme(legend.title = element_text(size = plotTextSize[1] * legendTextSizeFactor[1], face = "bold"), legend.text = element_text(size = plotTextSize[1] * legendTextSizeFactor[2]))
	
	if(rotateLegend) p <- p + guides(fill = guide_legend(title = legendTitle, direction = "horizontal", title.position = "top", label.position = "bottom", label.hjust = 0.5, label.vjust = 0.5, label.theme = element_text(angle = 90)))
	if (useLegendCoordinate) {
		p <- p + theme(legend.position = legendCoordinate, legend.background = element_rect(fill = "transparent",colour = NA))
	} else {
		p <- p + theme(legend.position = legendPosition) 
	}
	
	if(plotErrorMessage) p <- p + ggtitle("ERROR: NO DATA!!!")
	
	print(p)

    ]]>
</rgg>
########################################################################################
# name: Heatmap / Plate Heatmap Plotter
# author: Martin Stoeter
# category: screening/heatmap
# preview: Heatmap.png
Plots heatmaps e.g. as 2D matrix with color code as variable.
Can be used to plot plate heatmap if plateRow and plateColumn is chosen as 2D matrix. 

Parameter:
Define x-/y-axis columns to set up the 2D matrix of the heatmap
 - spaces between axis ticks / labels can ge specified, -Auto- calculates that automatically, invert sets the direction of the column
Define variable column that is plotted as as color in heatmap
 - to use a flow variable check box and type in variable names using the format: FLOWVAR(variable name)
 - define color for minimum, middle and maximum value to use continuous color space
 - or select different color models for the plot (see: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#rcolorbrewer-palette-chart )
 - if 'default min-max' is selected calculation method for middle color can be chosen or custom value set
Layout Options: 
 - select background/theme and set general font size in plot (default = 14) (see: http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements)
 - theme 'nothing' just plots the heatmap without any labels
 - set size and alpha value (transparency) of points, lines and error bars (default = [2,0.5,0.1] and [1,0.5,0.5])
 - give plot title and title factor (default = 1.2)
 - x-axis text: angle, text size factor for x-/y-axis (default = 0.8) 
 - give legend title, adjust position (fixed position outside diagram or free(range:0-1): [0.1,0.9] = top-left) and legend title/text size factor(default = 0.8) 
HINT: usage as Plate Heatmap Plotter:
 - use plateRow as y-axis and check invert
 - use plateColunm as x-axis
 - use variables for color or use flowvariable option to plot many heatmaps 
######

<rgg>

    <!--1. Title and short description -->
    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>

    <gaprow height="1"/>

    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    #1.0 Parameter selection
	#R debugging: delete all variables except kIn
	#rm(list=ls(all=TRUE)[which(ls(all=TRUE) != "kIn")])
	<group>
	
	# define 2D matrix as grid for heatmap
	<separator label="Define 2D matrix for heatmap" span="full"/>
	<hbox>
	xValue = <combobox items="$$$NUM_ATTRIBUTES$$$" label="x-axis:"/>
	yValue = <combobox items="$$$NUM_ATTRIBUTES$$$" label="y-axis:"/>
	</hbox>	
	<gaprow height="2"/>
	<hbox>
	numberxAxisTickLabels = c(<vector label="range of tick labels on x-axis:" size="1" default-value="-AUTO-"/>)
	numberyAxisTickLabels = c(<vector label="range of tick labels on y-axis:" size="1" default-value="-AUTO-"/>)
	invertxAxisDirection = <checkbox label="invert x-axis direction" selected="f"/>	
	invertyAxisDirection = <checkbox label="invert y-axis direction" selected="f"/>	
	</hbox>
		
	# Define variable to be plotted as color
	<separator label=" Variable column that is plottes as color" span="full"/>
	<hbox> 
	parameter = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Variable as color:"/>
	#define use of flow variables
	<checkbox label="use flow variable" var="useFlowVar" selected="false" />
	<textfield label="color flow variable:" var="flowVariableParameter" data-type="text" default-value= "" size="10" />
	</hbox>
	
	<hbox>
	<textfield label="color for minimum:" var="minColor" data-type="text" default-value= "blue" size="8" />
	<textfield label="color for middle:" var="midColor" data-type="text" default-value= "white" size="8" />
	<textfield label="color for maximum:" var="maxColor" data-type="text" default-value= "red" size="8" />
	<combobox var="colorPalette" items="default min-max,Set1,Set2,Set3,Accent,Dark2,Paired,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd" label="Color palette:"/>
	</hbox>
 	
	<hbox>
	calulationMidValue = <combobox label = "calculated middle color:" items = "min+max/2,mean,median,custom"/>
	<textfield label="custom value for middle color:" var="midValue" data-type="text" default-value= "0" size="8" />
	</hbox>
	
	#diagram options
	<separator label="Layout Options General Plot" span="full"/>
	<hbox>
	plotTheme = <combobox items="grey,black-white,linedraw,light,minimal,classic,nothing" label="background/theme:"/>
	plotTextSize = as.numeric(c(<vector label="font size [plot]:" size="1" default-value="14"/>))
	</hbox>
	
	<separator label="Layout Options Title" span="full"/>
	<hbox>
	<textfield label="plot title:" var="plotTitle" data-type="text" default-value= "" size="5"/>
	plotTitleSize = as.numeric(c(<vector label="text size [title]:" size="1" default-value="1.2"/>))
	</hbox>

	<separator label="Layout Options Axes" span="full"/>	
	<hbox>
	xAngle = as.numeric(c(<combobox label = "angle of x-axis labels:" items = "0,45,90"/>))
	axisTextSizeFactor = as.numeric(c(<vector label="axis text size [x/y]:" size="2" default-value="0.8,0.8"/>))
	</hbox>
	
	<hbox>
	axisTitleSizeFactor = as.numeric(c(<vector label="axis title size [x/y]:" size="2" default-value="1.0,1.0"/>))
	</hbox>

	<separator label="Layout Options Legend" span="full"/>
	<hbox>
	legendPosition = <combobox label = "legend position:" items = "right,top,bottom,left,none"/>
	useLegendCoordinate = <checkbox label="use legend coordinate" selected="f"/>
	legendCoordinate = as.numeric(c(<vector label="coordinate [x,y]:" size="2" default-value="0.0,1.0"/>))
	</hbox>
	
	<hbox>
	legendTitle = <textfield label="legend title:" data-type="text" default-value="values" size="3"/>
	legendTextSizeFactor = as.numeric(c(<vector label="text size [title,text]:" size="2" default-value="0.8,0.8"/>))
	rotateLegend = <checkbox label="rotate 90deg." selected="f"/>
	</hbox>

	</group>

	<![CDATA[
	#2.0 R code	

	#2.1 load libaries
	library(ggplot2)
	library(RColorBrewer)

	#2.2.1 manage RGG to R: define as numbers / check input parameters
	# check flow variables
	if (useFlowVar && !is.na(flowVariableParameter)) {
		if(flowVariableParameter %in% names(kIn)) parameter <- flowVariableParameter
	}
	
	# for brewer palettes check possible values
	if (colorPalette != "default min-max") {
		brewerTable <- do.call("cbind", brewer.pal.info)
		rownames(brewerTable) <- rownames(brewer.pal.info)
		if (colorPalette %in% rownames(brewerTable) && !useKNIMEColors) {
			maxNumberColors <- brewerTable[which(rownames(brewerTable) == colorPalette),"maxcolors"]
		} 
	}
	
	useKNIMEColors <- FALSE
	if(colorPalette == "KNIME colors") useKNIMEColors <- FALSE #set this to TRUE once KNIME colors is tested

	if (useKNIMEColors) {
		# check if color model is joined to data table
		if (!length(which(c("R","G","B","A") %in% names(kIn))) == 4) {
			colorPalette <- "standard"
			warning("KNIME colors not available in input table, standard palette is used instead")
			# if yes, generate color table from KNIME colors
		} else { 
			# check whether colors belong to grouping factor  
			colorTable <- lapply(factors, FUN = function(x) {
				subdata <- subset(kIn, kIn[, factorName] == x, select = c(R, G, B, A, RGBA), drop = FALSE)
				if(length(unique(subdata$RGBA)) > 1) stop("KNIME color model does not fit to selected factor column")
				subdata[1,]
				})
			# create color vector
			names(colorTable) <- factors
			colorTable <- do.call("rbind", colorTable)
			factorColors <- rgb(colorTable$R, colorTable$G, colorTable$B, colorTable$A, max =  255) 
			names(factorColors) <- factors
		}
	}
	
	#2.2.2 manage RGG to R: set scales to default and check scales
	if (is.na(plotTitle))	plotTitle <- NULL		#default if no title is given
	if (is.na(plotTextSize[1]) | (plotTextSize[1] < 0) | (plotTextSize[1] > 40)) plotTextSize[1] <- 14
	if (is.na(plotTitleSize[1]) | (plotTitleSize[1] < 0) | (plotTitleSize[1] > 5)) plotTitleSize[1] <- 1.2
	if (is.na(as.numeric(numberxAxisTickLabels))) {
		numberxAxisTickLabels <- 0  #e.g. is equal to "-AUTO-"
		} else {
		numberxAxisTickLabels <- as.numeric(numberxAxisTickLabels)
		}
	if (is.na(as.numeric(numberyAxisTickLabels))) {
		numberyAxisTickLabels <- 0  #e.g. is equal to "-AUTO-"
		} else {
		numberyAxisTickLabels <- as.numeric(numberyAxisTickLabels)
		}
	if (is.na(axisTextSizeFactor[1]) | (axisTextSizeFactor[1] < 0) | (axisTextSizeFactor[1] > 5)) axisTextSizeFactor[1] <- 0.8
	if (is.na(axisTextSizeFactor[2]) | (axisTextSizeFactor[2] < 0) | (axisTextSizeFactor[2] > 5)) axisTextSizeFactor[2] <- 0.8
	if (is.na(axisTitleSizeFactor[1]) | (axisTitleSizeFactor[1] < 0) | (axisTitleSizeFactor[1] > 5)) axisTitleSizeFactor[1] <- 1
	if (is.na(axisTitleSizeFactor[2]) | (axisTitleSizeFactor[2] < 0) | (axisTitleSizeFactor[2] > 5)) axisTitleSizeFactor[2] <- 1
	if (is.na(legendCoordinate[1]) | is.na(legendCoordinate[2]) | (legendCoordinate[1] < 0) | (legendCoordinate[1] > 1) | (legendCoordinate[2] < 0) | (legendCoordinate[2] > 1)) useLegendCoordinate <- FALSE
	if (is.na(legendTextSizeFactor[1]) | (legendTextSizeFactor[1] < 0) | (legendTextSizeFactor[1] > 5)) legendTextSizeFactor[1] <- 0.8
	if (is.na(legendTextSizeFactor[2]) | (legendTextSizeFactor[2] < 0) | (legendTextSizeFactor[2] > 5)) legendTextSizeFactor[2] <- 0.8
	if (xAngle == 0 ) xAxisAjust <- c(0.5,1.0) #xAxisAjust = c(hjust,vjust)
	if (xAngle == 45) xAxisAjust <- c(1.0,1.0)	
	if (xAngle == 90) xAxisAjust <- c(1.0,0.5)	
	
	#2.3 calculate
	# create rowID column if needed
	parameterCols <- c(xValue ,yValue , parameter)
	x <- kIn[,xValue]
	y <- kIn[,yValue]
	z <- kIn[,parameter]
	
	#make axis label ticks / breaks for labelling the axes
	xLevels <- nlevels(factor(x))
	yLevels <- nlevels(factor(y))
	if (numberxAxisTickLabels == 0) {
		xBreacks <- seq(min(x), max(x), length.out = xLevels)
		} else {
		xBreacks <- seq(min(x), max(x), by = numberxAxisTickLabels)
		}
	if (numberyAxisTickLabels == 0) {
		yBreacks <- seq(min(y), max(y), length.out = yLevels)
		} else {
		yBreacks <- seq(min(y), max(y), by = numberyAxisTickLabels)
		}
	if (invertxAxisDirection) xBreacks <- rev(xBreacks)
	if (invertyAxisDirection) yBreacks <- rev(yBreacks)
	
	plotData <- data.frame(x,y,z)
	
	# define the color value ranges for color palette from ColorBrewer
	if (colorPalette != "default min-max") {
		plotData$col <- cut(plotData$z,breaks = seq(from = min(plotData$z), to = max(plotData$z)+0.000000001, length.out = maxNumberColors), right = FALSE)
		} else {
		if (calulationMidValue == "min+max/2") midValue <- (min(plotData$z, na.rm = TRUE) + max(plotData$z, na.rm = TRUE)) / 2
		if (calulationMidValue == "mean") midValue <- mean(plotData$z, na.rm = TRUE)
		if (calulationMidValue == "median") midValue <- median(plotData$z, na.rm = TRUE)
		if (calulationMidValue == "custom") midValue <- midValue
		}

	#2.4.1 plot
	#ggplot(plotData, aes(x=x, y=y)) + geom_tile(aes(fill=z)) + scale_fill_gradient(low="black", high="white")
	p <- ggplot(plotData, aes(x=x, y=y)) 
	if (colorPalette == "default min-max") {
		p <- p + geom_raster(aes(fill=z)) + scale_fill_gradient2(low = minColor, mid = midColor, high = maxColor, midpoint = midValue, name = legendTitle) 
		} else {
		p <- p + geom_raster(aes(fill=col)) + scale_fill_brewer(palette = colorPalette)
		}

	#2.4.1 layout plot
	#general
	if(plotTheme == "grey")	p <- p + theme_grey(base_size=plotTextSize[1])
	if(plotTheme == "black-white")	p <- p + theme_bw(base_size=plotTextSize[1])
	if(plotTheme == "linedraw")	p <- p + theme_linedraw(base_size=plotTextSize[1])	
	if(plotTheme == "light")	p <- p + theme_light(base_size=plotTextSize[1])
	if(plotTheme == "minimal")	p <- p + theme_minimal(base_size=plotTextSize[1])
	if(plotTheme == "classic")	p <- p + theme_classic(base_size=plotTextSize[1])	

	#title options
	p <- p + theme(plot.title = element_text(size = plotTextSize[1] * plotTitleSize[1]))
	if(is.null(plotTitle)) {
		p <- p + ggtitle(parameter)
		} else {
		p <- p + ggtitle(plotTitle)
		}
	
	#axis label options
	if (invertxAxisDirection) {
		p <- p + scale_x_reverse(xValue, breaks=xBreacks)
		} else {
		p <- p + scale_x_continuous(xValue, breaks=xBreacks)
		}
	if (invertyAxisDirection) {
		p <- p + scale_y_reverse(yValue, breaks=yBreacks)
		} else {
		p <- p + scale_y_continuous(yValue, breaks=yBreacks)
		}
	p <- p + theme(axis.title.x = element_text(size = plotTextSize[1] * axisTitleSizeFactor[1]), axis.title.y = element_text(size = plotTextSize[1] * axisTitleSizeFactor[2]))
	p <- p + theme(axis.text.x = element_text(angle = xAngle, hjust = xAxisAjust[1], vjust = xAxisAjust[2], size = plotTextSize[1] * axisTextSizeFactor[1]), axis.text.y = element_text(size = plotTextSize[1] * axisTextSizeFactor[2]))

	#legend
	if(rotateLegend) {
		p <- p + scale_color_discrete(name = legendTitle, guide = guide_legend(direction = "horizontal", title.position = "top", label.position="bottom", label.hjust = 0.5, label.vjust = 0.5, label.theme = element_text(angle = 90)))
		} else {
		p <- p + scale_color_discrete(name = legendTitle)
	}

	p <- p + theme(legend.title = element_text(size = plotTextSize[1] * legendTextSizeFactor[1], face = "bold"), legend.text = element_text(size = plotTextSize[1] * legendTextSizeFactor[2]))
	if (useLegendCoordinate) {
		p <- p + theme(legend.position = legendCoordinate, legend.background = element_rect(fill = "transparent",colour = NA))
		} else {
		p <- p + theme(legend.position = legendPosition) 
	}
	
	if(plotTheme == "nothing")	{
		p <- p + theme_classic()
		p <- p + theme(line = element_blank(), text = element_blank(), line = element_blank(), title = element_blank(), legend.position = "none")
	}
	
	print(p)

    ]]>
</rgg>

########################################################################################
# name: 5D-Scatterplot
# author: Antje Janosch
# category: scatterplots
# preview: scatterplot.png

A simple scatterplot which is able to use KNIME-color , -shape and -size model (requires minimum version 3.0.0. for R-scripting integration)
######

<rgg>

<!--1. Title and short description -->

<h3 text="5D-Scatterplot" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">a description</labelarea>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="1"/>

#1.0 Parameter selection

<group>

# b) X-Axis
<hbox>
x.col = c(<combobox items="$$$ALL_ATTRIBUTES$$$" label="X-Axis"/>)
#define use of flow variables
<checkbox label="use flow variable X" var="useFlowVarX" selected="false" />
<textfield label="flow variable X:" var="flowVariableParameterX" data-type="text" default-value= "" size="10" />
</hbox>
<hbox>
# c) Y-Axis
y.col = c(<combobox items="$$$ALL_ATTRIBUTES$$$" label="Y-Axis"/>)
#define use of flow variables
<checkbox label="use flow variable Y" var="useFlowVarY" selected="false" />
<textfield label="flow variable Y:" var="flowVariableParameterY" data-type="text" default-value= "" size="10" />
</hbox>
# d) color, size, shape model 
<checkbox  label="use KNIME color model" var="color.model" selected="false"/>
<checkbox  label="use KNIME size model" var="size.model" selected="false"/>
<checkbox  label="use KNIME shape model" var="shape.model" selected="false"/>

# e) #diagram options
<separator label="Layout Options General Plot" span="full"/>
<textfield label="Title of plot:" var="plot.title" data-type="text" default-value= "" size="1"/>
<hbox>
plotTheme = <combobox items="grey,black-white,linedraw,light,minimal,classic,nothing" label="background/theme:"/>
plot.text.size = as.numeric(c(<vector label="font size [plot]:" size="1" default-value="14"/>))
</hbox>
<textfield label="Rotation angle for x axis labels:" var="x_angle" data-type="number" default-value="0"/>
<hbox>
point.fixed.size = as.numeric(c(<vector label="point size" size="1" default-value="2"/>))
point.alpha = as.numeric(c(<vector label="point alpha value" size="1" default-value="0.7"/>))
</hbox>
</group>

<![CDATA[
#2.0 R code	

#2.1 load libaries
library(ggplot2)
library(scales)

#2.2 manage RGG to R: define as numbers / check input parameters
# check flow variables
if (useFlowVarX && !is.na(flowVariableParameterX)) {
	if(flowVariableParameterX %in% names(kIn)) x.col <- flowVariableParameterX
} else {
	warning("Flow variable for x-axis not found")
}
if (useFlowVarY && !is.na(flowVariableParameterY)) {
	if(flowVariableParameterY %in% names(kIn)) y.col <- flowVariableParameterY
} else {
	warning("Flow variable for y-axis not found")
}

if (is.na(plot.title)) plot.title <- NULL	#default if no title is given
if (is.na(plot.text.size[1]) | (plot.text.size[1] < 0) | (plot.text.size[1] > 40)) plot.text.size[1] <- 14
#if (is.na(plotTitleSize[1]) | (plotTitleSize[1] < 0) | (plotTitleSize[1] > 5)) plotTitleSize[1] <- 1.2

# setting x-axis angle
x_angle <- as.numeric(x_angle)
if (is.na(x_angle)) x_angle <- 0
if (x_angle == 0 ) {
	x_axis_ajust <- c(0.5,1.0) # x_axis_ajust = c(hjust,vjust)
} else {
	if (x_angle == 45)  {
		x_axis_ajust <- c(1.0,1.0)	
	} else {
		if (x_angle == 90) {
			x_axis_ajust <- c(1.0,0.5)	
		} else {
			x_axis_ajust <- c(0.5,1.0)
		}
	}
}	
if(size.model) {
	if (!is.na(point.fixed.size)) warning("Given fixed point size will be ignored because size model is used.")
	point.fixed.size <- NULL 
} else {
	if (is.na(point.fixed.size) | point.fixed.size < 0) point.fixed.size <- 2
}
if (is.na(point.alpha) | point.alpha < 0 | point.alpha > 1) point.fixed.size <- 0.7

# check models
if(size.model && !exists("kIn.size.model")) 
	warning("No KNIME size model provided.")
if(color.model && !exists("kIn.color.model")) 
	warning("No KNIME color model provided.")
if(shape.model && !exists("kIn.shape.model")) 
	warning("No KNIME shape model provided.")
	
keep <- c(x = x.col,y = y.col)

if(size.model & exists("kIn.size.model")) {
	keep <- c(keep, size = kIn.size.model)
} else size.model <- FALSE
if(color.model & exists("kIn.color.model")) {
	keep <- c(keep, color = names(kIn.color.model)[1])
} else color.model <- FALSE
if(shape.model & exists("kIn.shape.model")) {
	keep <- c(keep, shapeVal = names(kIn.shape.model)[1])
}else shape.model <- FALSE

#2.3 calculate
data <- kIn[,match(keep, names(kIn))]
names(data) <- names(keep)

if(size.model) {
	my.trans <- trans_new("KNIME size model", "kIn.size.model.fun", function(x) x)
}

color.model.discrete <- FALSE
if(color.model) {
	kIn.color.model$color <- as.character(kIn.color.model$color)
	if(!is.numeric(kIn.color.model[,1])) color.model.discrete <- TRUE
}

if(shape.model) {
	data <- merge(data, kIn.shape.model, by.x = "shapeVal", by.y = names(kIn.shape.model)[1])
	data$pch <- factor(data$pch)
	shapeValues <- kIn.shape.model$pch[match(levels(data$shapeVal),kIn.shape.model[,1])]
}

#2.4.1 plot
p <- ggplot(data, aes(x = x, y = y)) + geom_point(alpha = point.alpha, size = point.fixed.size)
#geom_point(aes(size = size, color = color, shape = shapeVal))

#2.4.2 set general layout of plot
if(plotTheme == "grey")	p <- p + theme_grey(base_size=plot.text.size[1])
if(plotTheme == "black-white")	p <- p + theme_bw(base_size=plot.text.size[1])
if(plotTheme == "linedraw")	p <- p + theme_linedraw(base_size=plot.text.size[1])	
if(plotTheme == "light")	p <- p + theme_light(base_size=plot.text.size[1])
if(plotTheme == "minimal")	p <- p + theme_minimal(base_size=plot.text.size[1])
if(plotTheme == "classic")	p <- p + theme_classic(base_size=plot.text.size[1])
if(plotTheme == "nothing")	p <- p + theme_classic() + theme(line = element_blank(), text = element_blank(), title = element_blank(), legend.position = "none")

#2.4.3 use models in plot
if(size.model) {
	p <- p + aes(size = size)
	p <- p + scale_size_identity(kIn.size.model, trans = my.trans, guide = "legend")
}
if(color.model) {
	p <- p + aes(color = color)
	if(color.model.discrete) {
		col.vec <- kIn.color.model[,2]
		names(col.vec) <- kIn.color.model[,1]
		p <- p + scale_color_manual(names(kIn.color.model)[1], values = col.vec)
	} else {
		p <- p + scale_color_gradient(names(kIn.color.model)[1], low = kIn.color.model$color[1], high = kIn.color.model$color[2])
	}
}
if(shape.model) {
	p <- p + aes(shape = shapeVal)
	p <- p + scale_shape_manual(names(kIn.shape.model)[1], values = shapeValues)
}

#2.4.4 set specific layout options
p <- p + theme(axis.text.x = element_text(angle = x_angle, hjust =  x_axis_ajust[1], vjust =  x_axis_ajust[2]))
p <- p + labs(title = plot.title, x = x.col, y = y.col)
print(p)

]]>
</rgg>

########################################################################################
# name: Multiparametric Boxplot Grid (ggplot)
# author: Antje Janosch
# category: basic/boxplots
# preview: boxplot_ggplot.png

A grid of parallel boxplots, one for each selected assay parameter. The number of actual parallel boxplots is defined by a categorical variable (like a well-treatment)

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define your categorical variable of interest
# make sure that the sorting of the data is being preserved
# b) Define the grouping factor
<combobox var="groupColumn" items="$$$STR_ATTRIBUTES$$$" label="Factor" span = "1"/>

# b) Define your assay parameters of interest
params =  c(<panellistbox label="Assay parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

<separator label="Layout Options Scales / Color" span="full"/>
<hbox>
free.scales = <checkbox label="use free y-scales" selected="t"/>
<checkbox  label="use KNIME color model" var="color.model" selected="false"/>
</hbox>

#diagram options
<separator label="Layout Options General Plot" span="full"/>
<hbox>
plotTheme = <combobox items="grey,black-white" label="background/theme:"/>
plotTextSize = as.numeric(c(<vector label="font size [plot]:" size="1" default-value="14"/>))
</hbox>



</group>


# 2. r-code

<![CDATA[

library(ggplot2)
library(tidyr)

if(color.model && !exists("kIn.color.model")) 
  warning("No KNIME color model provided.")

keep <- c(x = groupColumn,y = params)
names(keep) <- c(groupColumn, params)

# color model checks:
# should it be used?
# is it available
# is it defined for the grouping column?
if(color.model & exists("kIn.color.model")) {
  if(names(kIn.color.model[1]) != groupColumn) {
    warning("KNIME color model not used as it does not belong to the grouping column")
    color.model <- FALSE
  }
} else color.model <- FALSE

data <- kIn[,match(keep, names(kIn))]

# reshape to long format
data_long <- gather_(data, "parameter", "value", params)

# set if y-scaling should be fixed or free
yScales <- "fixed"
if(free.scales) yScales <- "free_y"

# check if the color model is a discrete one
color.model.discrete <- FALSE
if(color.model) {
  kIn.color.model$color <- as.character(kIn.color.model$color)
  if(!is.numeric(kIn.color.model[,1])) color.model.discrete <- TRUE
}

p <- ggplot(data = data_long, aes_string(x = groupColumn, y = "value", group = groupColumn, colour = groupColumn, fill = groupColumn)) + geom_boxplot(notch = TRUE, alpha = 0.3)

# plot settings - theme
if(plotTheme == "grey"){
  p <- p + theme_grey(base_size = plotTextSize[1])
} else {
  p <- p + theme_bw(base_size = plotTextSize[1])
}

p <- p + facet_wrap(~parameter, scales = yScales)
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))

# plot settings - color model
if(color.model) {
  p <- p + aes_string(color = groupColumn, fill = groupColumn)
  if(color.model.discrete) {
    col.vec <- kIn.color.model[,2]
    names(col.vec) <- kIn.color.model[,1]
    p <- p + scale_color_manual(names(kIn.color.model)[1], values = col.vec)
    p <- p + scale_fill_manual(names(kIn.color.model)[1], values = col.vec)
  } 
}

print(p)

]]>

</rgg>

########################################################################################
# name: Barplot or Boxplot with points (beta)
# author: Martin Stoeter
# category: basic/bar-boxplots
# preview: bar-boxplot.png

Flexible template to create a barplot or a boxplot with points (optional add violins or error bars)

Parameter:
Parameter to plot - Select a column with values to plot
To use a flow variable check box and type in variable name using the format: FLOWVAR(variable name)
Plot style - Select to plot the data as barplot, boxplot or none of those (e.g. just plot points or violins)
Select checkboxs to plot points, violins and/or errorbars? 

x-axis - Label to put at the x-axis 
2D-grid grouping - Allows to split the dataset into multiple plots by this condition 
colourby - Colour bars by condition

Change point size or jitterin width if neccessary
HINT: points are plotted twice with second being a little smaller (1. is line, 2. is fill; play with alpha values...)
Trim distribution of violins, or change alpha value of violins
If robust statistics is checked then median and mad will be used for bar height and error bar; use dogde to change gap of data in x

Layout Options: 
 - select background/theme and set general font size in plot (default = 14)
 - select different color models for the plot (see: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#rcolorbrewer-palette-chart )
 - give plot title and title factor (default = 1.2)
 - x-axis test: angle, text size factor for x-/y-axis (default = 0.8) 
 - y-axis title (or use parameter name: for 2D grid => 'height'), axis title factor (default = 1.0)
 - adjust y-axis scale (check fixed and enter min + max)
 - give legend title, adjust position (fixed position outside diagram or free(range:0-1): [0.1,0.9] = top-left) and legend title/text size factor(default = 0.8)   
######

<rgg>

<!--1. Title and short description -->
<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>

<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

#1.0 Parameter selection
<group>

# Define your numerical parameters to be plotted
<hbox>  #define use of flow variables
yParameters = c(<combobox items="$$$NUM_ATTRIBUTES$$$" label="select parameter to plot"/>)
<checkbox label="use flow variable" var="useFlowVar" selected="false" />
<textfield label="parameter variable:" var="flowVariableParameter" data-type="text" default-value= "" size="10" />
</hbox>

# Define your numerical parameters for error bars
<hbox>  
plotType = c(<combobox items="barplot,boxplot,-NO SELECTION-" label="select plot type"/>)
plotPoints = <checkbox label="plot points" selected="t"/>
plotErrorbars = <checkbox label="plot errorbars" selected="t"/>
plotViolins = <checkbox label="plot violins" selected="f"/>
</hbox> 

<hbox>  #define x-axis, grid and color group
xFactor = c(<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis"/>)
facetBy = c(<combobox items="-NO SELECTION-,$$$STR_ATTRIBUTES$$$" label="2D grid grouping"/>)
colourBy = c(<combobox items="$$$STR_ATTRIBUTES$$$" label="coloured by"/>)
<combobox var="colorPalette" items="ggplot default,KNIME colors,Set1,Set2,Set3,Accent,Dark2,Paired,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd" label="Color palette:"/>
</hbox>

#diagram options
<separator label="Layout Options Plot Style" span="full"/>
<hbox>
pointSize = as.numeric(c(<vector label="point size:" size="1" default-value="3"/>))
alphaPoints = as.numeric(c(<vector label="alpha values of points:" size="2" default-value="0.2,0.6"/>))
jitterWidth = as.numeric(c(<vector label="jitter width of points:" size="1" default-value="0.5"/>))
</hbox>

<hbox>
<textfield label="color of boxplot outliers:" var="boxPlotOutlierColor" data-type="text" default-value= "black" size="5"/>
trimViolin = <checkbox label="trim violins" selected="f"/>
alphaViolin = as.numeric(c(<vector label="alpha values of violins:" size="1" default-value="0.2"/>))
</hbox>

<hbox>
robustStatistics = <checkbox label="use robust statistics" selected="f"/>
dodgeWidth = as.numeric(c(<vector label="dodge width:" size="1" default-value="0.9"/>))
</hbox>

<gaprow height="2"/>	

#diagram options
<separator label="Layout Options General Plot" span="full"/>
<hbox>
plotTheme = <combobox items="grey,black-white,linedraw,light,classic" label="background/theme:"/>
plotTextSize = as.numeric(c(<vector label="font size [plot]:" size="1" default-value="14"/>))
</hbox>

<separator label="Layout Options Title" span="full"/>
<hbox>
<textfield label="plot title:" var="plotTitle" data-type="text" default-value= "" size="5"/>
plotTitleSize = as.numeric(c(<vector label="text size [title]:" size="1" default-value="1.2"/>))
</hbox>

<separator label="Layout Options Axes" span="full"/>	
<hbox>
xAngle = as.numeric(c(<combobox label = "angle of x-axis labels:" items = "0,45,90"/>))
axisTextSizeFactor = as.numeric(c(<vector label="axis text size [x/y]:" size="2" default-value="0.8,0.8"/>))
</hbox>
	
<hbox>
<textfield label="y-axis title:" var="yAxisLabel" data-type="text" default-value= "" size="3"/>
useParameternameAsAxisLabel = <checkbox label="use parameter name" selected="f"/>
axisTitleSizeFactor = as.numeric(c(<vector label="axis title size [x/y]:" size="2" default-value="1.0,1.0"/>))
</hbox>

<hbox>
useManualYaxisScale = <checkbox label="use fixed y-axis scale" selected="f"/>
yAxisScale = as.numeric(c(<vector label="y-axis scale [min,max]:" size="2" default-value=","/>))
</hbox>
	
#not yet implemented
<separator label="Layout Options Legend" span="full"/>
<hbox>
legendPosition = <combobox label = "legend position:" items = "right,top,bottom,left,none"/>
useLegendCoordinate = <checkbox label="use legend coordinate" selected="f"/>
legendCoordinate = as.numeric(c(<vector label="coordinate [x,y]:" size="2" default-value="0.0,1.0"/>))
</hbox>

#not yet implemented	
<hbox>
legendTitle = <textfield label="legend title:" data-type="text" default-value="" size="3"/>
legendTextSizeFactor = as.numeric(c(<vector label="text size [title,text]:" size="2" default-value="0.8,0.8"/>))
rotateLegend = <checkbox label="rotate 90deg." selected="f"/>
</hbox>

</group>

<![CDATA[

#2.0 R code	
colorVector <- c("#C0AFBB", "#E7B800", "#FC4E07","#C0AFBB", "#E7B800", "#FC4E07","#C0AFBB", "#E7B800", "#FC4E07")
#2.1 load libaries
library(dplyr) 
library(ggplot2)
library(RColorBrewer)

#2.2.1 manage RGG to R: define as numbers / check input parameters
# check flow variables
if (useFlowVar && !is.na(flowVariableParameter)) {
  yParameters <- flowVariableParameter
}
#make R compatibel column names (" ", "/", and other strange characters are replaced by ".")
yParametersOriginal <- yParameters
yParameters <- make.names(yParameters)
colnames(kIn)[colnames(kIn) == yParametersOriginal] <- make.names(yParameters)
colourByOriginal <- colourBy
colourBy <- make.names(colourBy)
colnames(kIn)[colnames(kIn) == colourByOriginal] <- make.names(colourBy)
xFactorOriginal <- xFactor
xFactor <- make.names(xFactor)
colnames(kIn)[colnames(kIn) == xFactorOriginal] <- make.names(xFactor)
facetByOriginal <- facetBy
if("-NO SELECTION-" %in% facetBy) {
  facetBy <- NULL 
  } else {
  facetBy <- make.names(facetBy)
  colnames(kIn)[colnames(kIn) == facetByOriginal] <- make.names(facetBy)
  }

# no bar height columns selected
if (is.null(yParameters)) stop("Error: Template initialization fails - no columns for bar height selected")

# for brewer palettes check possible values
useKNIMEColors <- colorPalette == "KNIME colors"
nFactors <- length(levels(kIn[,colourBy]))
brewerTable <- do.call("cbind", brewer.pal.info)
rownames(brewerTable) <- rownames(brewer.pal.info)
if (colorPalette %in% rownames(brewerTable) && !useKNIMEColors) {
	if (brewerTable[which(rownames(brewerTable) == colorPalette), "maxcolors"] < nFactors) colorPalette <- "ggplot default"
	} else {
	warningMessage <- paste("Color set '", colorPalette, "' cannot be used for ", nFactors, " different values. Color palette is reset to ggplot default", sep = "")
	warning(warningMessage)
	colorPalette <- "ggplot default"
	}

#2.2.2 manage RGG to R: set scales to default and check scales
if(plotPoints) boxPlotOutlierColor <- NA

kIn[,xFactor] <- as.factor(kIn[,xFactor])

#2.2.2 manage RGG to R: set scales to default and check scales
if (is.na(plotTitle))	plotTitle <- NULL		#default if no title is given
if (is.na(plotTextSize[1]) | (plotTextSize[1] < 0) | (plotTextSize[1] > 40)) plotTextSize[1] <- 14
if (is.na(plotTitleSize[1]) | (plotTitleSize[1] < 0) | (plotTitleSize[1] > 5)) plotTitleSize[1] <- 1.2
if (is.na(yAxisLabel))	yAxisLabel <- NULL
if (is.na(xAngle))	xAngle <- 0
if (is.na(axisTextSizeFactor[1]) | (axisTextSizeFactor[1] < 0) | (axisTextSizeFactor[1] > 5)) axisTextSizeFactor[1] <- 0.8
if (is.na(axisTextSizeFactor[2]) | (axisTextSizeFactor[2] < 0) | (axisTextSizeFactor[2] > 5)) axisTextSizeFactor[2] <- 0.8
if (is.na(axisTitleSizeFactor[1]) | (axisTitleSizeFactor[1] < 0) | (axisTitleSizeFactor[1] > 5)) axisTitleSizeFactor[1] <- 1
if (is.na(axisTitleSizeFactor[2]) | (axisTitleSizeFactor[2] < 0) | (axisTitleSizeFactor[2] > 5)) axisTitleSizeFactor[2] <- 1
if (is.na(yAxisScale[1]) | is.na(yAxisScale[2]))	yAxisScale <- NULL
if (useParameternameAsAxisLabel) yAxisLabel <- yParametersOriginal
if (is.na(legendCoordinate[1]) | is.na(legendCoordinate[2]) | (legendCoordinate[1] < 0) | (legendCoordinate[1] > 1) | (legendCoordinate[2] < 0) | (legendCoordinate[2] > 1)) useLegendCoordinate <- FALSE
if (is.na(legendTextSizeFactor[1]) | (legendTextSizeFactor[1] < 0) | (legendTextSizeFactor[1] > 5)) legendTextSizeFactor[1] <- 0.8
if (is.na(legendTextSizeFactor[2]) | (legendTextSizeFactor[2] < 0) | (legendTextSizeFactor[2] > 5)) legendTextSizeFactor[2] <- 0.8
if (xAngle == 0 ) xAxisAjust <- c(0.5,1.0) #xAxisAjust = c(hjust,vjust)
if (xAngle == 45) xAxisAjust <- c(1.0,1.0)	
if (xAngle == 90) xAxisAjust <- c(1.0,0.5)	
if (is.na(jitterWidth))	jitterWidth <- NULL
if (is.na(legendTitle)) legendTitle <- colourByOriginal		#default if no title is given

#2.3 calculate
# statistice table kIn.summary
if(robustStatistics) {
  kIn.summary <- kIn %>%
    group_by_at(vars(c(xFactor, colourBy, facetBy))) %>%  # _ at the end means it accepts strings and variables rather then interpretation of code as column name of data frame / table; at means it will evaluated with vars the list of grouping variables, e.g. here facetBy might be NULL and will not lead to crash of code
	summarise(
      median = median(.data[[yParameters]], na.rm = TRUE),  # .data[[]] interprets variable as name of column in data frame 
      mad = mad(.data[[yParameters]], na.rm = TRUE)
    ) %>%
    mutate(errorLow = median - mad) %>%
    mutate(errorHigh = median + mad) %>%
    rename(!!yParameters := median)  # !! means unqouting and yParameters is not interpreted as column name of data frame, instead content of this variable in interpreted as column name; := is neccessary to new value to old (old := new)
  } else {
  kIn.summary <- kIn %>%
    group_by_at(vars(c(xFactor, colourBy, facetBy)))  %>%
    summarise(  
      mean = mean(.data[[yParameters]], na.rm = TRUE),
      sd = sd(.data[[yParameters]], na.rm = TRUE)
    ) %>%
    mutate(errorLow = mean - sd) %>%
    mutate(errorHigh = mean + sd) %>%
    rename(!!yParameters := mean) 
  }
#kIn.summary

#2.4.1 plot
p <- ggplot(kIn, aes_string(x = xFactor, y = yParameters), color = black)

#2.4.1 layout of plot
#general layout
if(plotTheme == "grey")	p <- p + theme_grey(base_size=plotTextSize[1])
if(plotTheme == "black-white")	p <- p + theme_bw(base_size=plotTextSize[1])
if(plotTheme == "linedraw")	p <- p + theme_linedraw(base_size=plotTextSize[1])	
if(plotTheme == "light")	p <- p + theme_light(base_size=plotTextSize[1])
if(plotTheme == "classic")	p <- p + theme_classic(base_size=plotTextSize[1])

if(plotType == "boxplot") p <- p + geom_boxplot(aes_string(fill = colourBy), position = position_dodge(dodgeWidth), outlier.colour = boxPlotOutlierColor)
if(plotType == "barplot") p <- p + geom_bar(aes_string(fill = colourBy), data = kIn.summary, stat = "identity", position = position_dodge(dodgeWidth)) #+ geom_jitter(position = position_jitter(0.2), color = "black")

if(plotViolins) p <- p + geom_violin(aes_string(color = colourBy), alpha = alphaViolin, trim = trimViolin, inherit.aes = TRUE)

if(plotErrorbars)  p <- p + geom_errorbar(aes_string(ymin = "errorLow", ymax = "errorHigh", group = colourBy), data = kIn.summary, width = 0.2, position = position_dodge(dodgeWidth))

if(plotPoints) {
  p <- p + geom_point(aes_string(fill = colourBy), alpha = alphaPoints[1], size = pointSize, position = position_jitterdodge(jitter.width = jitterWidth, dodge.width=dodgeWidth, seed = 1))
  p <- p + geom_point(aes_string(color = colourBy), alpha = alphaPoints[2], size = pointSize - 1, position = position_jitterdodge(jitter.width = jitterWidth, dodge.width=dodgeWidth, seed = 1))
  }
#p <- p + geom_jitter(aes_string(color = colourBy), position = position_dodge(0.9), size = 3)

#doDotPlot <- TRUE
#dotPlotColor <- "darkgrey"
#dotPlotSize <- 0.7
#dotPlotStackRatio <- 0.7
#if(doDotPlot) p <- p + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = dotPlotSize, stackratio = dotPlotStackRatio, fill = dotPlotColor) 
#if(doDotPlot) p <- p + geom_jitter(aes_string(x = xFactor, shape = colourBy, color = colourBy), position = position_jitter(0.2), size = 3, dodge.width = 0.8)

#2.4.2 set optional layout of plot
# facet
if(!is.null(facetBy)) p <- p + facet_wrap(as.formula(paste("~", facetBy)))

#title options
p <- p + theme(plot.title = element_text(size = plotTextSize[1] * plotTitleSize[1]))
p <- p + ggtitle(plotTitle)

#axis label options
p <- p + scale_x_discrete(name = xFactorOriginal)
p <- p + theme(axis.title.x = element_text(size = plotTextSize[1] * axisTitleSizeFactor[1]), axis.title.y = element_text(size = plotTextSize[1] * axisTitleSizeFactor[2]))
p <- p + theme(axis.text.x = element_text(angle = xAngle, hjust = xAxisAjust[1], vjust = xAxisAjust[2], size = plotTextSize[1] * axisTextSizeFactor[1]), axis.text.y = element_text(size = plotTextSize[1] * axisTextSizeFactor[2]))

p <- p + scale_y_continuous(name = yAxisLabel)   # do normal y-axis 

#if(useManualYaxisScale) p <- p + scale_y_continuous(limits = yAxisScale, name = yAxisLabel) #use e.g. limits = c(0,100)
if(useManualYaxisScale) p <- p + coord_cartesian(ylim = yAxisScale)  # this does not crop the data like "limits" parameter

# color model checks: is it available? is it defined for the grouping column?
if(useKNIMEColors && !exists("kIn.color.model")) {
	stop("No KNIME color model provided. Script was stopped!")
	useKNIMEColors <- FALSE
	}
if(useKNIMEColors && names(kIn.color.model[1]) != colourByOriginal) {
	stop(paste("KNIME color model is different (", names(kIn.color.model[1]), ") from selected color grouping column (", colourByOriginal, ") in template. Script was stopped!"))
	useKNIMEColors <- FALSE
	} 
if(useKNIMEColors) {
	kIn.color.model$color <- as.character(kIn.color.model$color)
	#colourCol <- names(kIn.color.model)[1]
	factorColors <- kIn.color.model[,2]
	names(factorColors) <- kIn.color.model[,1]
	}
	
# color settings		
if(useKNIMEColors) {
	p <- p + scale_color_manual(name = colourBy, values = factorColors)
	p <- p + scale_fill_manual(name = colourBy, values = factorColors)
	} else {
	if(colorPalette == "ggplot default") {
		p <- p + scale_color_discrete(name = colourBy)
		p <- p + scale_fill_discrete(name = colourBy)
		} else {
		p <- p + scale_color_brewer(name = colourBy, palette = colorPalette) 
		p <- p + scale_fill_brewer(name = colourBy, palette = colorPalette)
		}
	}

#p <- p + scale_fill_manual(values = colorVector) + scale_colour_manual(values = colorVector)

#legend: legend title, text style and rotation
p <- p + guides(color = guide_legend(title = legendTitle), fill = guide_legend(title = legendTitle)) + theme(legend.title = element_text(size = plotTextSize[1] * legendTextSizeFactor[1], face = "bold"), legend.text = element_text(size = plotTextSize[1] * legendTextSizeFactor[2]))
	
if(rotateLegend) p <- p + guides(color = guide_legend(title = legendTitle), fill = guide_legend(title = legendTitle, direction = "horizontal", title.position = "top", label.position = "bottom", label.hjust = 0.5, label.vjust = 0.5, label.theme = element_text(angle = 90)))
if (useLegendCoordinate) {
	p <- p + theme(legend.position = legendCoordinate, legend.background = element_rect(fill = "transparent",colour = NA))
	} else {
	p <- p + theme(legend.position = legendPosition) 
	}
	
#if(plotErrorMessage) p <- p + ggtitle("ERROR: NO DATA!!!")
	
print(p)

]]>
</rgg>
########################################################################################
# name: Scatterplot with plot options (beta)
# author: Martin Stoeter, modified from Antje Niederleins' Barplot 
# category: scatterplots
# preview: scatterPlot_options.png

Flexible template to create a scatter plot or scatter plot grid with optional errorbars
In contrary to the LinePlot template, where categorial values are restriced to the x-axis, here numerical values have to be used to have a real scatter plot 
HINT: use GroupBy node to aggregated the data to e.g mean and sd columns 

Parameter:
x-axis - one numerical variable for x-axis
y-axis - One or multiple numerical variables that will be plotted as y-axis
Error bar checkbox - Draw errorbars?
Error bar - Error bar values corresponding to the y-axis values (same number of columns have to be selected)
To use a flow variable check box and type in variable names using the format: FLOWVAR(variable name)
2D-grid grouping parameter - Allows to split the dataset into multiple plots by this condition (multiple columns can be selected to combine information)
coloured by - Colour of points and lines by condition (mulitple columns can be selected to combine information)
Layout Options: 
 - select background/theme and set general font size in plot (default = 14)
 - plot points or lines or both
 - set size and alpha value (transparency) of points, lines and error bars (default = [2,0.5,0.1] and [1,0.5,0.5])
 - select different color models for the plot (see: http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/#rcolorbrewer-palette-chart )
 - optional the rows and columns can be defined for the 2D grid
 - give plot title and title factor (default = 1.2)
 - x-axis test: angle, text size factor for x-/y-axis (default = 0.8) 
 - y-axis title (or use parameter name: for 2D grid => 'height'), axis title factor (default = 1.0)
 - adjust y-axis scale (check fixed and enter min + max; free for 2D grid)
 - give legend title, adjust position (fixed position outside diagram or free(range:0-1): [0.1,0.9] = top-left) and legend title/text size factor(default = 0.8)   
######

<rgg>

    <!--1. Title and short description -->
    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>

    <gaprow height="1"/>

    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    #1.0 Parameter selection
	#R debugging: delete all variables except kIn
	#rm(list=ls(all=TRUE)[which(ls(all=TRUE) != "kIn")])
	<group>

	#define x-axis
	xFactor = <combobox label = "x-axis:" items = "$$$NUM_ATTRIBUTES$$$"/> 

	# Define your numerical parameters represented by y-axis
	barHeight = c(<panellistbox label="select columns with values for y-axis" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

	# Define your numerical parameters for error bars
	<hbox>  
	plot.Errorbars = <checkbox label="draw errorbars (select column with errorbar values)" selected="t"/>
	plot.Errorbars.Plus = <checkbox label="draw positive error" selected="t"/>
	plot.Errorbars.Negative = <checkbox label="draw negative error" selected="t"/>
	</hbox> 
	barError = c(<panellistbox label="cErrorBars" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)
	<gaprow height="2"/>

	<hbox>  #define use of flow variables
	<checkbox label="use flow variable" var="useFlowVar" selected="false" />
	<textfield label="bar height flow variable:" var="flowVariableBarHeight" data-type="text" default-value= "" size="10" />
	<textfield label="bar error flow variable:" var="flowVariableBarError" data-type="text" default-value= "" size="10" />
	</hbox>

	<hbox>  # grid and color group
	facetBy = c(<listbox label="2D grid grouping parameters" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	colourBy = c(<listbox label="coloured by" items="-NO SELECTION-,-USE COLUMN SELECTION-,$$$STR_ATTRIBUTES$$$"/>)
	<combobox var="colorPalette" items="ggplot default,Set1,Set2,Set3,Accent,Dark2,Paired,Spectral,RdYlGn,RdYlBu,RdGy,RdBu,PuOr,PrGn,PiYG,BrBG,Blues,BuGn,BuPu,GnBu,Greens,Greys,Oranges,OrRd,PuBu,PuBuGn,PuRd,Purples,RdPu,Reds,YlGn,YlGnBu,YlOrBr,YlOrRd,KNIME colors" label="Color palette:"/>
	</hbox>
	
 	#diagram options
	<separator label="Layout Options General Plot" span="full"/>
	<hbox>
	plotPointsLines = <combobox label = "Points and/or lines:" items = "points_only,points_and_lines,lines_only"/>
	pointLineSize = as.numeric(c(<vector label="Size [points/lines/error]:" size="3" default-value="5,0.5,0.01"/>))
	alphaValue = as.numeric(c(<vector label="Alpha [points/lines/error]:" size="3" default-value="1,0.5,0.5"/>))
	</hbox>
	<hbox>
	plotTheme = <combobox items="grey,black-white,linedraw,light,classic" label="background/theme:"/>
	plotTextSize = as.numeric(c(<vector label="font size [plot]:" size="1" default-value="14"/>))
	twoDgridRow = c(<vector label="2D grid [row]:" size="1" default-value="-AUTO-"/>)
	twoDgridColumn = c(<vector label="2D grid [column]:" size="1" default-value="-AUTO-"/>)
	</hbox>

	<separator label="Layout Options Title" span="full"/>
	<hbox>
	<textfield label="plot title:" var="plotTitle" data-type="text" default-value= "" size="5"/>
	plotTitleSize = as.numeric(c(<vector label="text size [title]:" size="1" default-value="1.2"/>))
	</hbox>

	<separator label="Layout Options Axes" span="full"/>	
	<hbox>
	xAngle = as.numeric(c(<combobox label = "angle of x-axis labels:" items = "0,45,90"/>))
	axisTextSizeFactor = as.numeric(c(<vector label="axis text size [x/y]:" size="2" default-value="0.8,0.8"/>))
	</hbox>
	
	<hbox>
	<textfield label="y-axis title:" var="yAxisLabel" data-type="text" default-value= "" size="3"/>
	useParameternameAsAxisLabel = <checkbox label="use parameter name" selected="t"/>
	axisTitleSizeFactor = as.numeric(c(<vector label="axis title size [x/y]:" size="2" default-value="1.0,1.0"/>))
	</hbox>

	<hbox>
	useManualYaxisScale = <checkbox label="use fixed y-axis scale" selected="f"/>
	yAxisScale = as.numeric(c(<vector label="y-axis scale [min,max]:" size="2" default-value=","/>))
	free.scales = <checkbox label="use free y-scales (for 2D grid)" selected="t"/>
	</hbox>

	<hbox>
    yAxisScaleLog10 = <checkbox label="logarithmic y-axis scale" selected="f"/>
    yAxisTextLog10 = <checkbox label="logarithmic y-axis numbers" selected="f"/>
	</hbox>

	<separator label="Layout Options Legend" span="full"/>
	<hbox>
	legendPosition = <combobox label = "legend position:" items = "right,top,bottom,left,none"/>
	useLegendCoordinate = <checkbox label="use legend coordinate" selected="f"/>
	legendCoordinate = as.numeric(c(<vector label="coordinate [x,y]:" size="2" default-value="0.0,1.0"/>))
	</hbox>
	
	<hbox>
	legendTitle = <textfield label="legend title:" data-type="text" default-value="" size="3"/>
	legendTextSizeFactor = as.numeric(c(<vector label="text size [title,text]:" size="2" default-value="0.8,0.8"/>))
	rotateLegend = <checkbox label="rotate 90deg." selected="f"/>
	</hbox>

	</group>

	<![CDATA[
	#2.0 R code	

	#2.1 load libaries
	library(ggplot2)
	library(reshape)
	library(grid)
	library(RColorBrewer)
	library(scales)

	#2.2.1 manage RGG to R: define as numbers / check input parameters
	# check flow variables
	if (useFlowVar && !is.na(flowVariableBarHeight)) {
    	barHeight <- flowVariableBarHeight
	}
	if(plot.Errorbars && useFlowVar && !is.na(flowVariableBarError)) {
		barError <- flowVariableBarError
	}
	# no bar height columns selected
	if(is.null(barHeight)) stop("Error: Template initialization fails - no columns for bar height selected")
	# errorbars checked but no column selected
	if(plot.Errorbars & is.null(barError)) plot.Errorbars <- FALSE	# simply don't plot any errorbars
	if(plot.Errorbars & length(barHeight) != length(barError)) stop("Error: Template initialization fails - number of bar height columns not equal to number of error bar columns")
	# no xFactor selected
	if("-NO SELECTION-" %in% xFactor) xFactor <- NULL
	if("-NO SELECTION-" %in% facetBy) facetBy <- NULL
	if("-NO SELECTION-" %in% colourBy) colourBy <- NULL

	xFactorFlag <- facetFlag <- colourFlag <- FALSE
	if(is.null(xFactor)) xFactor <- "-ROW ID-"
	if(!is.null(xFactor) && "-USE COLUMN SELECTION-" %in% xFactor) { xFactorCol <- NULL; xFactorFlag <- TRUE } else xFactorCol <- xFactor
	if(!is.null(facetBy) && "-USE COLUMN SELECTION-" %in% facetBy) { facetCol <- NULL; facetFlag <- TRUE } else facetCol <- facetBy
	if(!is.null(colourBy) && "-USE COLUMN SELECTION-" %in% colourBy) { colourCol <- NULL; colourFlag <- TRUE } else colourCol <- colourBy

	useKNIMEColors <- colorPalette == "KNIME colors"

	# for brewer palettes check possible values
	nFactors <- length(colourCol)
	brewerTable <- do.call("cbind", brewer.pal.info)
	rownames(brewerTable) <- rownames(brewer.pal.info)
	if (colorPalette %in% rownames(brewerTable) && !useKNIMEColors) {
		if (brewerTable[which(rownames(brewerTable) == colorPalette),"maxcolors"] < nFactors) colorPalette <- "ggplot default"
	} else {
		warningMessage <- paste("Color set '", colorPalette, "' cannot be used for ", nFactors, " different values. Color palette is reset to ggplot default", sep = "")
		warning(warningMessage)
		colorPalette <- "ggplot default"
	}
	
	if(free.scales) free.scales <- "free_y" else free.scales <- "fixed"
	# 2D grid options (define rows and columns)
	if(is.na(as.numeric(twoDgridRow))) {twoDgridRow <- NULL  #e.g. is equal to "-AUTO-"
		} else twoDgridRow <- round(as.numeric(twoDgridRow))
	if(is.na(as.numeric(twoDgridColumn))) {twoDgridColumn <- NULL  #e.g. is equal to "-AUTO-"
		} else twoDgridColumn <- round(as.numeric(twoDgridColumn))
	
	#2.2.2 manage RGG to R: set scales to default and check scales
	if (is.na(pointLineSize[1]) | (pointLineSize[1] < 0) | (pointLineSize[1] > 40)) pointLineSize[1] <- 2
	if (is.na(pointLineSize[2]) | (pointLineSize[2] < 0) | (pointLineSize[2] > 40)) pointLineSize[2] <- 0.5
	if (is.na(pointLineSize[3]) | (pointLineSize[3] < 0) | (pointLineSize[3] > 10)) pointLineSize[3] <- 0.1
	if (is.na(alphaValue[1]) | (alphaValue[1] < 0) | (alphaValue[1] > 1)) pointLineSize[1] <- 1
	if (is.na(alphaValue[2]) | (alphaValue[2] < 0) | (alphaValue[2] > 1)) pointLineSize[2] <- 0.5
	if (is.na(alphaValue[3]) | (alphaValue[3] < 0) | (alphaValue[3] > 1)) pointLineSize[3] <- 0.5
	if (is.na(plotTitle))	plotTitle <- NULL		#default if no title is given
	if (is.na(plotTextSize[1]) | (plotTextSize[1] < 0) | (plotTextSize[1] > 40)) plotTextSize[1] <- 14
	if (is.na(plotTitleSize[1]) | (plotTitleSize[1] < 0) | (plotTitleSize[1] > 5)) plotTitleSize[1] <- 1.2
	if (is.na(yAxisLabel))	yAxisLabel <- NULL
	if (is.na(xAngle))	xAngle <- 0
	if (is.na(axisTextSizeFactor[1]) | (axisTextSizeFactor[1] < 0) | (axisTextSizeFactor[1] > 5)) axisTextSizeFactor[1] <- 0.8
	if (is.na(axisTextSizeFactor[2]) | (axisTextSizeFactor[2] < 0) | (axisTextSizeFactor[2] > 5)) axisTextSizeFactor[2] <- 0.8
	if (is.na(axisTitleSizeFactor[1]) | (axisTitleSizeFactor[1] < 0) | (axisTitleSizeFactor[1] > 5)) axisTitleSizeFactor[1] <- 1
	if (is.na(axisTitleSizeFactor[2]) | (axisTitleSizeFactor[2] < 0) | (axisTitleSizeFactor[2] > 5)) axisTitleSizeFactor[2] <- 1
	if (is.na(yAxisScale[1]) | is.na(yAxisScale[2]))	yAxisScale <- NULL
	if (useParameternameAsAxisLabel) yAxisLabel <- barHeight
	if (is.na(legendCoordinate[1]) | is.na(legendCoordinate[2]) | (legendCoordinate[1] < 0) | (legendCoordinate[1] > 1) | (legendCoordinate[2] < 0) | (legendCoordinate[2] > 1)) useLegendCoordinate <- FALSE
	if (is.na(legendTextSizeFactor[1]) | (legendTextSizeFactor[1] < 0) | (legendTextSizeFactor[1] > 5)) legendTextSizeFactor[1] <- 0.8
	if (is.na(legendTextSizeFactor[2]) | (legendTextSizeFactor[2] < 0) | (legendTextSizeFactor[2] > 5)) legendTextSizeFactor[2] <- 0.8
	if (xAngle == 0 ) xAxisAjust <- c(0.5,1.0) #xAxisAjust = c(hjust,vjust)
	if (xAngle == 45) xAxisAjust <- c(1.0,1.0)	
	if (xAngle == 90) xAxisAjust <- c(1.0,0.5)	

	#2.3 calculate
	# create rowID column if needed
	if("-ROW ID-" %in% xFactorCol) kIn[,"-ROW ID-"] <- rownames(kIn)

	# combine columns if necessary
	if(length(xFactor) > 1) {
		xFactorCol <- paste(xFactor, collapse = " + ")
		kIn[,xFactorCol] <- apply(kIn[,xFactor], 1, paste, collapse = " + ")
	}
	if(length(facetBy) > 1) {
		facetCol <- paste(facetBy, collapse = " + ")
		kIn[,facetCol] <- apply(kIn[,facetBy], 1, paste, collapse = " + ")
	}
	if(length(colourBy) > 1) {
		colourCol <- paste(colourBy, collapse = " + ")
		kIn[,colourCol] <- apply(kIn[,colourBy], 1, paste, collapse = " + ")
	}
	
	# extract necessary data and reshape it
	meanData <- kIn[,c(barHeight,xFactorCol, facetCol, colourCol)]

	meanDataLong <- melt(meanData, measure.vars = barHeight, variable_name = "- PARAMETERS -")
	names(meanDataLong)[which(names(meanDataLong) == "value")] <- "height"

	#check if values/data is there, to prevent R error message
	if(length(which(!is.na(meanDataLong$height))) == 0){
		meanDataLong$height[1] <- 0
		plotErrorMessage <- TRUE
		} else {
		plotErrorMessage <-FALSE
	}
	
	# add errorbar data
	if(plot.Errorbars) {
		sdData <- kIn[,c(barError,xFactorCol, facetCol, colourCol)]
		sdDataLong <- melt(sdData, measure.vars = barError)
		meanDataLong$error <- sdDataLong$value
		if(plot.Errorbars.Negative) {
			meanDataLong$low <- with(meanDataLong, height - error)
		} else {
			meanDataLong$low <- with(meanDataLong, height)
		}
		if(plot.Errorbars.Plus) {
			meanDataLong$high <- with(meanDataLong, height + error)
		} else {
			meanDataLong$high <- with(meanDataLong, height)
		}
		if(yAxisScaleLog10) {
			meanDataLong[which(meanDataLong$low < 0),"low"] <- 0.000000001
		}
	}

	if(xFactorFlag) xFactorCol <- "- PARAMETERS -"
	if(facetFlag) facetCol <- "- PARAMETERS -"
	if(colourFlag) colourCol <- "- PARAMETERS -"

	if(is.na(legendTitle)) legendTitle <- colourCol		#default if no title is given
	
	if(!is.null(facetBy)) { 
		facetTitle <- facetCol
		meanDataLong$template.facet.column <- meanDataLong[,facetCol]
		facetCol <- "template.facet.column"
	}
	if (is.null(colourCol)) {   #set grouping column for line plot
		groupData <- "- PARAMETERS -"
		} else {
		groupData <- colourCol
		}
			
	if(!is.null(colourBy)) meanDataLong[,colourCol] <- factor(meanDataLong[,colourCol])

	#convert to discrete format
	#meanDataLong[,xFactorCol] <- factor(meanDataLong[,xFactorCol])
	#meanDataLong[,"ggplot_groupid"] <- 1 : nrow(meanDataLong)  # variable colourCol needs to be replaced with ggplot_groupid

	#2.4.1 plot
	p <- ggplot(meanDataLong, aes(x = get(xFactorCol), y = height, group = colourCol))

	my.dodge <- position_dodge(width=0.9)
	if(!is.null(colourBy)) {
		if(plotPointsLines == "points_and_lines" || plotPointsLines == "points_only") {
			p <- p + geom_point(aes(colour = factor(get(colourCol))), position = my.dodge, size = pointLineSize[1], alpha = alphaValue[1])}
		if(plotPointsLines == "points_and_lines" || plotPointsLines == "lines_only") {
			p <- p + geom_line(aes(colour = factor(get(colourCol)), group = get(groupData)), size = pointLineSize[2], alpha = alphaValue[2])}
		if(plot.Errorbars) {
			p <- p + geom_errorbar(aes(colour = factor(get(colourCol)), ymin = low, ymax = high, group = get(colourCol)), width = pointLineSize[3], alpha = alphaValue[3])}
		} else { 
		if(plotPointsLines == "points_and_lines" || plotPointsLines == "points_only") {
			p <- p + geom_point(colour = "black", position = my.dodge, size = pointLineSize[1], alpha = alphaValue[1])}
		if(plotPointsLines == "points_and_lines" || plotPointsLines == "lines_only") {
			p <- p + geom_line(aes(group = get(groupData)), colour = "black", size = pointLineSize[2], alpha = alphaValue[2])}
		if(plot.Errorbars) {
			p <- p + geom_errorbar(aes(ymin = low, ymax = high), colour = "black", width = pointLineSize[3], alpha = alphaValue[3])}
	}

	if(!is.null(facetBy)) {
		p <- p + facet_wrap(~ template.facet.column, nrow = twoDgridRow, ncol = twoDgridColumn, scales=free.scales)
		fTitle <- paste("Grid factor: ",facetTitle,sep = "")
		if(!is.null(plotTitle)) plotTitle <- paste(plotTitle,fTitle,sep = " / ") else plotTitle <- fTitle
		p <- p + ggtitle(plotTitle)
		} else {
		if(!is.null(plotTitle)) p <- p + ggtitle(plotTitle)
	}
	
	#2.4.1 layout plot
	#general
	if(plotTheme == "grey")	p <- p + theme_grey(base_size=plotTextSize[1])
	if(plotTheme == "black-white")	p <- p + theme_bw(base_size=plotTextSize[1])
	if(plotTheme == "linedraw")	p <- p + theme_linedraw(base_size=plotTextSize[1])	
	if(plotTheme == "light")	p <- p + theme_light(base_size=plotTextSize[1])
	if(plotTheme == "classic")	p <- p + theme_classic(base_size=plotTextSize[1])

	#2.4.2 set general layout of plot
	#title options
	p <- p + theme(plot.title = element_text(size = plotTextSize[1] * plotTitleSize[1]))

	#axis label options
	p <- p + labs(x = xFactorCol, y = yAxisLabel)
	p <- p + theme(axis.title.x = element_text(size = plotTextSize[1] * axisTitleSizeFactor[1]), axis.title.y = element_text(size = plotTextSize[1] * axisTitleSizeFactor[2]))
	p <- p + theme(axis.text.x = element_text(angle = xAngle, hjust = xAxisAjust[1], vjust = xAxisAjust[2], size = plotTextSize[1] * axisTextSizeFactor[1]), axis.text.y = element_text(size = plotTextSize[1] * axisTextSizeFactor[2]))
	
	# fixing the y-axis labeling, make parameter name or custom y-axis label instead of "height", only if no multi-parameteric plot and only if no y-Axis label was added in the GUI
	if(((!is.null(facetBy) && "-USE COLUMN SELECTION-" %in% facetBy )|| length(barHeight) > 1) && is.null(yAxisLabel)) yAxisLabel <- "height"
	
	if(useManualYaxisScale) p <- p + coord_cartesian(ylim = yAxisScale) 

	if(yAxisScaleLog10) {
		p <- p + scale_y_log10(name = yAxisLabel)   # do y-axis in log 10 scale
		if(yAxisTextLog10) p <- p + scale_y_log10(name = yAxisLabel, breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
	} else {
		p <- p + scale_y_continuous(name = yAxisLabel)   # do normal y-axis 
		if(yAxisTextLog10) p <- p + scale_y_continuous(name = yAxisLabel, breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) 
	}
	
	# color model checks: is it available? is it defined for the grouping column?
	if(useKNIMEColors && !exists("kIn.color.model")) {
		stop("No KNIME color model provided. Script was stopped!")
		useKNIMEColors <- FALSE
	}
	if(useKNIMEColors && names(kIn.color.model[1]) != colourCol) {
		stop(paste("KNIME color model is different (", names(kIn.color.model[1]), ") from selected color grouping column (", colourCol, ") in template. Script was stopped!"))
		useKNIMEColors <- FALSE
	} 
	if(useKNIMEColors) {
		kIn.color.model$color <- as.character(kIn.color.model$color)
		colourCol <- names(kIn.color.model)[1]
		factorColors <- kIn.color.model[,2]
		names(factorColors) <- kIn.color.model[,1]
	}
	
	# color settings		
	if(useKNIMEColors) {
		p <- p + scale_color_manual(name = colourCol, values = factorColors)
		p <- p + scale_fill_manual(name = colourCol, values = factorColors)
	} else {
		if(colorPalette == "ggplot default") {
			p <- p + scale_color_discrete(name = colourCol)
			p <- p + scale_fill_discrete(name = colourCol)
		} else {
			p <- p + scale_color_brewer(name = colourCol, palette = colorPalette) 
			p <- p + scale_fill_brewer(name = colourCol, palette = colorPalette)
		}
	}
	
	#legend: legend title, text style and rotation
	p <- p + guides(fill = guide_legend(title = legendTitle)) + theme(legend.title = element_text(size = plotTextSize[1] * legendTextSizeFactor[1], face = "bold"), legend.text = element_text(size = plotTextSize[1] * legendTextSizeFactor[2]))
	
	if(rotateLegend) p <- p + guides(fill = guide_legend(title = legendTitle, direction = "horizontal", title.position = "top", label.position = "bottom", label.hjust = 0.5, label.vjust = 0.5, label.theme = element_text(angle = 90)))
	if (useLegendCoordinate) {
		p <- p + theme(legend.position = legendCoordinate, legend.background = element_rect(fill = "transparent",colour = NA))
	} else {
		p <- p + theme(legend.position = legendPosition) 
	}
	
	if(plotErrorMessage) p <- p + ggtitle("ERROR: NO DATA!!!")
	
	print(p)

    ]]>
</rgg>